app\admin\AdminPanel.module.css
.container {
  padding: 2rem;
  max-width: 1200px;
  margin: 0 auto;
  min-height: calc(100vh - 80px);
  background-color: #f5f7fa;
  font-family: 'Inter', sans-serif;
}

.title {
  font-size: 2.25rem;
  font-weight: 700;
  color: #1f2937;
  margin-bottom: 2rem;
  text-align: center;
}

.subtitle {
  font-size: 1.8rem;
  font-weight: 600;
  color: #1f2937;
  margin-bottom: 1rem;
}

.actionButtons {
  display: flex;
  justify-content: center;
  gap: 2rem;
  margin-bottom: 2rem;
}

.actionButton {
  background: linear-gradient(90deg, #3b82f6, #60a5fa);
  color: white;
  padding: 1.5rem 3rem;
  border-radius: 12px;
  font-size: 1.2rem;
  font-weight: 600;
  border: none;
  cursor: pointer;
  transition: all 0.3s ease;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  text-align: center;
}

.actionButton:hover {
  background: linear-gradient(90deg, #2563eb, #3b82f6);
  transform: translateY(-3px);
  box-shadow: 0 6px 16px rgba(0, 0, 0, 0.2);
}

.activeButton {
  background: linear-gradient(90deg, #1e40af, #3b82f6);
  transform: scale(1.05);
}

.formContainer {
  background: white;
  border-radius: 12px;
  padding: 2rem;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  margin-bottom: 2rem;
}

.form {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
}

.formGroup {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.formGroup label {
  font-size: 1rem;
  font-weight: 500;
  color: #1f2937;
}

.formGroup input,
.formGroup select {
  padding: 0.75rem;
  border: 1px solid #d1d5db;
  border-radius: 6px;
  font-size: 1rem;
  color: #1f2937;
  width: 100%;
  transition: border-color 0.2s ease;
}

.formGroup input:focus,
.formGroup select:focus {
  outline: none;
  border-color: #3b82f6;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

.button {
  background-color: #3b82f6;
  color: white;
  padding: 0.75rem 1.5rem;
  border-radius: 6px;
  font-size: 1rem;
  font-weight: 600;
  border: none;
  cursor: pointer;
  transition: background-color 0.3s ease, transform 0.2s ease;
}

.button:hover {
  background-color: #2563eb;
  transform: scale(1.05);
}

.error {
  color: #dc2626;
  font-size: 1rem;
  margin-bottom: 1rem;
  text-align: center;
}

.success {
  color: #16a34a;
  font-size: 1rem;
  margin-bottom: 1rem;
  text-align: center;
}

@media (max-width: 768px) {
  .container {
    padding: 1rem;
  }

  .title {
    font-size: 1.75rem;
  }

  .actionButtons {
    flex-direction: column;
    gap: 1rem;
  }

  .actionButton {
    padding: 1rem 2rem;
    font-size: 1rem;
  }

  .formContainer {
    padding: 1rem;
  }
}

app\admin\page.tsx
'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { useUser } from '@clerk/nextjs';
import styles from './AdminPanel.module.css';
import { Course } from '@/types';

export default function AdminPanel() {
  const { user, isLoaded } = useUser();
  const router = useRouter();
  const [courses, setCourses] = useState<Course[]>([]);
  const [courseFormData, setCourseFormData] = useState({
    title: '',
    description: '',
    image: '',
    icon: '',
  });
  const [lessonFormData, setLessonFormData] = useState({
    courseId: '',
    title: '',
    content: '',
    thumbnail: '',
    videoEmbed: '',
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const [activeForm, setActiveForm] = useState<'course' | 'lesson' | null>(null);

  useEffect(() => {
    if (isLoaded && (!user || user.publicMetadata?.role !== 'admin')) {
      router.push('/courses');
    }

    async function fetchCourses() {
      try {
        const response = await fetch('/api/courses');
        if (!response.ok) {
          throw new Error('Failed to fetch courses');
        }
        const data = await response.json();
        setCourses(Array.isArray(data) ? data : []);
      } catch (err: any) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    }
    fetchCourses();
  }, [isLoaded, user, router]);

  const handleCourseInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>
  ) => {
    const { name, value } = e.target;
    setCourseFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleLessonInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>
  ) => {
    const { name, value } = e.target;
    setLessonFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleCourseSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    setSuccess(null);

    try {
      const response = await fetch('/api/courses', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          title: courseFormData.title,
          description: courseFormData.description,
          image: courseFormData.image,
          icon: courseFormData.icon,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to create course');
      }

      setSuccess('Course created successfully!');
      setCourseFormData({
        title: '',
        description: '',
        image: '',
        icon: '',
      });

      // Refresh courses list
      const updatedResponse = await fetch('/api/courses');
      if (updatedResponse.ok) {
        const updatedData = await updatedResponse.json();
        setCourses(Array.isArray(updatedData) ? updatedData : []);
      }

      setActiveForm(null); // Hide form after submission
    } catch (err: any) {
      setError(err.message);
    }
  };

  const handleLessonSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    setSuccess(null);

    try {
      const response = await fetch(`/api/courses/${lessonFormData.courseId}/lessons`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          title: lessonFormData.title,
          content: lessonFormData.content,
          thumbnail: lessonFormData.thumbnail,
          videoEmbed: lessonFormData.videoEmbed,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to create lesson');
      }

      setSuccess('Lesson created successfully!');
      setLessonFormData({
        courseId: lessonFormData.courseId,
        title: '',
        content: '',
        thumbnail: '',
        videoEmbed: '',
      });

      setActiveForm(null); // Hide form after submission
    } catch (err: any) {
      setError(err.message);
    }
  };

  if (loading) return <div className={styles.container}>Loading...</div>;
  if (!user || user.publicMetadata?.role !== 'admin') return null;

  return (
    <div className={styles.container}>
      <h1 className={styles.title}>Admin Panel</h1>

      {/* Action Buttons */}
      <div className={styles.actionButtons}>
        <button
          className={`${styles.actionButton} ${activeForm === 'course' ? styles.activeButton : ''}`}
          onClick={() => setActiveForm(activeForm === 'course' ? null : 'course')}
        >
          Create New Course
        </button>
        <button
          className={`${styles.actionButton} ${activeForm === 'lesson' ? styles.activeButton : ''}`}
          onClick={() => setActiveForm(activeForm === 'lesson' ? null : 'lesson')}
        >
          Create New Lesson
        </button>
      </div>

      {/* Error and Success Messages */}
      {error && <div className={styles.error}>{error}</div>}
      {success && <div className={styles.success}>{success}</div>}

      {/* Course Creation Form */}
      {activeForm === 'course' && (
        <div className={styles.formContainer}>
          <h2 className={styles.subtitle}>Create New Course</h2>
          <form onSubmit={handleCourseSubmit} className={styles.form}>
            <div className={styles.formGroup}>
              <label htmlFor="title">Course Title</label>
              <input
                type="text"
                id="title"
                name="title"
                value={courseFormData.title}
                onChange={handleCourseInputChange}
                required
              />
            </div>
            <div className={styles.formGroup}>
              <label htmlFor="description">Description</label>
              <input
                type="text"
                id="description"
                name="description"
                value={courseFormData.description}
                onChange={handleCourseInputChange}
                required
              />
            </div>
            <div className={styles.formGroup}>
              <label htmlFor="image">Image URL</label>
              <input
                type="url"
                id="image"
                name="image"
                value={courseFormData.image}
                onChange={handleCourseInputChange}
                required
              />
            </div>

            <button type="submit" className={styles.button}>
              Create Course
            </button>
          </form>
        </div>
      )}

      {/* Lesson Creation Form */}
      {activeForm === 'lesson' && (
        <div className={styles.formContainer}>
          <h2 className={styles.subtitle}>Create New Lesson</h2>
          <form onSubmit={handleLessonSubmit} className={styles.form}>
            <div className={styles.formGroup}>
              <label htmlFor="courseId">Select Course</label>
              <select
                id="courseId"
                name="courseId"
                value={lessonFormData.courseId}
                onChange={handleLessonInputChange}
                required
              >
                <option value="">-- Select a Course --</option>
                {courses.map((course) => {
                  const courseId =
                    typeof course.id === 'string'
                      ? course.id.split(':').pop() || course.id
                      : String(course.id);
                  return (
                    <option key={courseId} value={courseId}>
                      {course.title}
                    </option>
                  );
                })}
              </select>
            </div>
            <div className={styles.formGroup}>
              <label htmlFor="title">Lesson Title</label>
              <input
                type="text"
                id="title"
                name="title"
                value={lessonFormData.title}
                onChange={handleLessonInputChange}
                required
              />
            </div>
            <div className={styles.formGroup}>
              <label htmlFor="content">Lesson Content</label>
              <input
                type="text"
                id="content"
                name="content"
                value={lessonFormData.content}
                onChange={handleLessonInputChange}
                required
              />
            </div>
            <div className={styles.formGroup}>
              <label htmlFor="thumbnail">Thumbnail URL</label>
              <input
                type="url"
                id="thumbnail"
                name="thumbnail"
                value={lessonFormData.thumbnail}
                onChange={handleLessonInputChange}
                required
              />
            </div>
            <div className={styles.formGroup}>
              <label htmlFor="videoEmbed">Video Embed URL</label>
              <input
                type="url"
                id="videoEmbed"
                name="videoEmbed"
                value={lessonFormData.videoEmbed}
                onChange={handleLessonInputChange}
                required
              />
            </div>
            <button type="submit" className={styles.button}>
              Create Lesson
            </button>
          </form>
        </div>
      )}
    </div>
  );
}

app\api\courses\route.ts
import { NextResponse } from 'next/server';
import db, { connectDB } from '@/lib/surrealdb';
import { Course } from '@/types';
import { currentUser } from '@clerk/nextjs/server';

export async function GET(req: Request) {
  try {
    const { searchParams } = new URL(req.url);
    const limit = parseInt(searchParams.get('limit') || '0') || 0;

    await connectDB();

    let sql = `SELECT * FROM courses ORDER BY created_at DESC`;
    if (limit > 0) {
      sql += ` LIMIT ${limit}`;
    }

    const result = await db.query<Course[]>(sql);
    let courses: Course[] = [];
    if (Array.isArray(result)) {
      courses = Array.isArray(result[0]) ? result[0] : result;
    } else if (Array.isArray((result[0] as any)?.result)) {
      courses = (result[0] as { result: Course[] }).result;
    }

    return NextResponse.json(courses, { status: 200 });
  } catch (error: any) {
    console.error('Error fetching courses:', error.message);
    return NextResponse.json(
      { error: 'Failed to fetch courses', details: error.message },
      { status: 500 }
    );
  }
}

export async function POST(req: Request) {
  try {
    const user = await currentUser();
    if (!user) {
      console.log('POST /api/courses: User not authenticated');
      return NextResponse.json({ error: 'User not authenticated' }, { status: 401 });
    }

    // Check if user is admin
    const isAdmin = user.publicMetadata?.role === 'admin';
    if (!isAdmin) {
      console.log('POST /api/courses: Unauthorized, user role:', user.publicMetadata?.role);
      return NextResponse.json({ error: 'Unauthorized: Admin access required' }, { status: 403 });
    }

    const body = await req.json();
    console.log('POST /api/courses: Received body:', body);

    const { title, description, image, icon } = body;


    await connectDB();

    // Let SurrealDB generate the ID automatically
    const newCourse = await db.create<Course>('courses', {
      title,
      description,
      image,
      icon,
      created_at: new Date().toISOString(),
    });
    console.log('POST /api/courses: Course created successfully:', newCourse);

    return NextResponse.json(newCourse, { status: 201 });
  } catch (error: any) {
    console.error('POST /api/courses: Error creating course:', error.message);
    return NextResponse.json(
      { error: 'Failed to create course', details: error.message },
      { status: 500 }
    );
  }
}

app\api\courses\[courseId]\delete\route.ts
import { NextResponse } from 'next/server';
import { currentUser } from '@clerk/nextjs/server';
import db, { connectDB } from '@/lib/surrealdb';
import { RecordId } from 'surrealdb';
import { Course, Lesson } from '@/types';

export async function DELETE(
  req: Request,
  { params }: { params: Promise<{ courseId: string }> }
) {
  try {
    console.log('Starting DELETE request for course');
    const user = await currentUser();
    if (!user) {
      console.log('User not authenticated');
      return NextResponse.json({ error: 'User not authenticated' }, { status: 401 });
    }
    console.log('User authenticated:', user.id);

    // Check if user is admin
    const isAdmin = user.publicMetadata?.role === 'admin';
    if (!isAdmin) {
      console.log('Unauthorized: User is not admin, role:', user.publicMetadata?.role);
      return NextResponse.json({ error: 'Unauthorized: Admin access required' }, { status: 403 });
    }

    const { courseId } = await params;
    if (!courseId || courseId === 'undefined') {
      console.log('Invalid course ID');
      return NextResponse.json({ error: 'Course ID is required' }, { status: 400 });
    }

    await connectDB();
    const courseIdRecord = new RecordId('courses', courseId);
    console.log('DELETE Course ID =>', courseId);
    console.log('RECORD ID =>', courseIdRecord);

    // Check if course exists
    const course = await db.select<Course>(courseIdRecord);
    if (!course) {
      console.log(`Course not found: ${courseIdRecord}`);
      return NextResponse.json({ error: 'Course not found' }, { status: 404 });
    }
    console.log('Course found:', course);

    // Check for associated lessons
    const lessons = await db.query<Lesson[]>(`SELECT * FROM lessons WHERE course = $courseId`, {
      courseId: `courses:${courseId}`,
    });
    let lessonCount = 0;
    if (Array.isArray(lessons)) {
      lessonCount = Array.isArray(lessons[0]) ? lessons[0].length : lessons.length;
    } else if (Array.isArray((lessons[0] as any)?.result)) {
      lessonCount = (lessons[0] as { result: Lesson[] }).result.length;
    }

    if (lessonCount > 0) {
      console.log(`Cannot delete course ${courseId}: ${lessonCount} lessons associated`);
      return NextResponse.json(
        { error: 'Cannot delete course with associated lessons' },
        { status: 400 }
      );
    }

    console.log(`Before deleting course: ${courseIdRecord}`);
    await db.delete(courseIdRecord);
    console.log('DELETE RESULT =>', 'Course deleted');

    console.log(`Course deleted: ${courseIdRecord}`);
    return NextResponse.json({ message: 'Course deleted successfully' }, { status: 200 });
  } catch (error: any) {
    console.error('DELETE ERROR =>', error.message);
    return NextResponse.json(
      { error: 'Failed to delete course', details: error.message },
      { status: 500 }
    );
  }
}

app\api\courses\[courseId]\lessons\route.ts
import { NextResponse } from 'next/server';
import db, { connectDB } from '@/lib/surrealdb';
import { Lesson } from '@/types';
import { currentUser } from '@clerk/nextjs/server';

export async function GET(
  req: Request,
  { params }: { params: Promise<{ courseId: string }> }
) {
  try {
    const { courseId } = await params;
    if (!courseId || courseId === 'undefined') {
      return NextResponse.json({ error: 'Invalid course ID' }, { status: 400 });
    }

    await connectDB();

    const sql = `SELECT * FROM lessons WHERE course = $courseId ORDER BY created_at ASC`;
    const result = await db.query<Lesson[]>(sql, { courseId: `courses:${courseId}` });
    console.log('Raw lessons query result:', result); // Debug log

    let lessons: Lesson[] = [];
    if (Array.isArray(result)) {
      lessons = Array.isArray(result[0]) ? result[0] : result;
    } else if (Array.isArray((result[0] as any)?.result)) {
      lessons = (result[0] as { result: Lesson[] }).result;
    }

    console.log('Processed lessons:', lessons); // Debug log
    return NextResponse.json(lessons, { status: 200 });
  } catch (error: any) {
    console.error(`Error fetching lessons for course ${courseId}:`, error.message);
    return NextResponse.json(
      { error: 'Failed to fetch lessons', details: error.message },
      { status: 500 }
    );
  }
}

export async function POST(
  req: Request,
  { params }: { params: Promise<{ courseId: string }> }
) {
  try {
    const user = await currentUser();
    if (!user) {
      return NextResponse.json({ error: 'User not authenticated' }, { status: 401 });
    }

    // Check if user is admin
    const isAdmin = user.publicMetadata?.role === 'admin';
    if (!isAdmin) {
      return NextResponse.json({ error: 'Unauthorized: Admin access required' }, { status: 403 });
    }

    const { courseId } = await params;
    if (!courseId || courseId === 'undefined') {
      return NextResponse.json({ error: 'Invalid course ID' }, { status: 400 });
    }

    const { title, content, thumbnail, videoEmbed } = await req.json();
    if (!title || !content || !thumbnail || !videoEmbed) {
      return NextResponse.json(
        { error: 'Title, content, thumbnail, and video embed are required' },
        { status: 400 }
      );
    }

    await connectDB();

    // Verify course exists
    const course = await db.select(`courses:${courseId}`);
    if (!course) {
      return NextResponse.json({ error: 'Course not found' }, { status: 404 });
    }

    const newLesson = await db.create<Lesson>('lessons', {
      course: `courses:${courseId}`,
      title,
      content,
      thumbnail,
      videoEmbed,
      created_at: new Date().toISOString(),
    });

    return NextResponse.json(newLesson, { status: 201 });
  } catch (error: any) {
    console.error(`Error creating lesson for course ${courseId}:`, error.message);
    return NextResponse.json(
      { error: 'Failed to create lesson', details: error.message },
      { status: 500 }
    );
  }
}

app\api\courses\[courseId]\lessons\[lessonId]\delete\route.ts
import { NextResponse } from 'next/server';
import { currentUser } from '@clerk/nextjs/server';
import db, { connectDB } from '@/lib/surrealdb';
import { RecordId } from 'surrealdb';
import { Lesson } from '@/types';

export async function DELETE(
  req: Request,
  { params }: { params: Promise<{ courseId: string; lessonId: string }> }
) {
  try {
    console.log('Starting DELETE request for lesson');
    const user = await currentUser();
    if (!user) {
      console.log('User not authenticated');
      return NextResponse.json({ error: 'User not authenticated' }, { status: 401 });
    }
    console.log('User authenticated:', user.id);

    // Check if user is admin
    const isAdmin = user.publicMetadata?.role === 'admin';
    if (!isAdmin) {
      console.log('Unauthorized: User is not admin, role:', user.publicMetadata?.role);
      return NextResponse.json({ error: 'Unauthorized: Admin access required' }, { status: 403 });
    }

    const { courseId, lessonId } = await params;
    if (!courseId || courseId === 'undefined' || !lessonId || lessonId === 'undefined') {
      console.log('Invalid course or lesson ID');
      return NextResponse.json({ error: 'Course ID and Lesson ID are required' }, { status: 400 });
    }

    await connectDB();
    const lessonIdRecord = new RecordId('lessons', lessonId);
    console.log('DELETE Lesson ID =>', lessonId);
    console.log('RECORD ID =>', lessonIdRecord);

    const lesson = await db.select<Lesson>(lessonIdRecord);
    if (!lesson) {
      console.log(`Lesson not found: ${lessonIdRecord}`);
      return NextResponse.json({ error: 'Lesson not found' }, { status: 404 });
    }
    console.log('Lesson found:', lesson);

    console.log(`Before deleting lesson: ${lessonIdRecord}`);
    await db.delete(lessonIdRecord);
    console.log('DELETE RESULT =>', 'Lesson deleted');

    console.log(`Lesson deleted: ${lessonIdRecord}`);
    return NextResponse.json({ message: 'Lesson deleted successfully' }, { status: 200 });
  } catch (error: any) {
    console.error('DELETE ERROR =>', error.message);
    return NextResponse.json(
      { error: 'Failed to delete lesson', details: error.message },
      { status: 500 }
    );
  }
}

app\api\courses\[courseId]\lessons\[lessonId]\route.ts
import { NextResponse } from 'next/server';
import db, { connectDB } from '@/lib/surrealdb';
import { RecordId, Patch } from 'surrealdb';
import { Lesson } from '@/types';
import { currentUser } from '@clerk/nextjs/server';

export async function GET(
  req: Request,
  { params }: { params: Promise<{ courseId: string; lessonId: string }> }
) {
  try {
    const { courseId, lessonId } = await params;
    console.log('Requested courseId:', courseId, 'lessonId:', lessonId);

    if (!courseId || courseId === 'undefined' || !lessonId || lessonId === 'undefined') {
      return NextResponse.json({ error: 'Course ID and Lesson ID are required' }, { status: 400 });
    }

    await connectDB();
    const lessonIdRecord = new RecordId('lessons', lessonId);
    console.log('Constructed lesson RecordId:', lessonIdRecord.toString());

    const lesson = await db.select<Lesson>(lessonIdRecord);
    console.log('Selected lesson:', lesson);

    if (!lesson) {
      return NextResponse.json({ error: 'Lesson not found' }, { status: 404 });
    }

    let lessonCourseId: string;
    if (typeof lesson.course === 'string') {
      lessonCourseId = lesson.course.includes(':') ? lesson.course.split(':').pop()! : lesson.course;
    } else if (typeof lesson.course === 'object' && 'id' in lesson.course) {
      lessonCourseId = lesson.course.id;
    } else {
      return NextResponse.json({ error: 'Invalid course reference' }, { status: 500 });
    }

    return NextResponse.json(lesson, { status: 200 });
  } catch (error: any) {
    console.error('Error fetching lesson:', error.message);
    return NextResponse.json(
      { error: 'Failed to fetch lesson', details: error.message },
      { status: 500 }
    );
  }
}

export async function PUT(
  req: Request,
  { params }: { params: Promise<{ courseId: string; lessonId: string }> }
) {
  try {
    const user = await currentUser();
    if (!user) {
      console.log('User not authenticated');
      return NextResponse.json({ error: 'User not authenticated' }, { status: 401 });
    }

    const isAdmin = user.publicMetadata?.role === 'admin';
    if (!isAdmin) {
      console.log('Unauthorized: User is not admin, role:', user.publicMetadata?.role);
      return NextResponse.json({ error: 'Unauthorized: Admin access required' }, { status: 403 });
    }

    const { courseId, lessonId } = await params;
    if (!courseId || courseId === 'undefined' || !lessonId || lessonId === 'undefined') {
      return NextResponse.json({ error: 'Course ID and Lesson ID are required' }, { status: 400 });
    }

    const { title, content, thumbnail, videoEmbed } = await req.json();
    if (!title || !content || !thumbnail || !videoEmbed) {
      return NextResponse.json(
        { error: 'Title, content, thumbnail, and video embed are required' },
        { status: 400 }
      );
    }

    await connectDB();
    const lessonIdRecord = new RecordId('lessons', lessonId);

    const existingLesson = await db.select<Lesson>(lessonIdRecord);
    if (!existingLesson) {
      console.log(`Lesson not found: ${lessonIdRecord}`);
      return NextResponse.json({ error: 'Lesson not found' }, { status: 404 });
    }

    const patchData: Patch[] = [
      { op: 'replace', path: '/title', value: title },
      { op: 'replace', path: '/content', value: content },
      { op: 'replace', path: '/thumbnail', value: thumbnail },
      { op: 'replace', path: '/videoEmbed', value: videoEmbed },
    ];

    const updatedLesson = await db.patch(lessonIdRecord, patchData);
    console.log('Updated lesson:', updatedLesson);

    return NextResponse.json(updatedLesson, { status: 200 });
  } catch (error: any) {
    console.error('Error updating lesson:', error.message);
    return NextResponse.json(
      { error: 'Failed to update lesson', details: error.message },
      { status: 500 }
    );
  }
}

app\api\courses\[courseId]\route.ts
import { NextResponse } from 'next/server';
import db, { connectDB } from '@/lib/surrealdb';
import { Course } from '@/types';
import { currentUser } from '@clerk/nextjs/server';
import { RecordId, Patch } from 'surrealdb';

export async function GET(
  req: Request,
  { params }: { params: Promise<{ courseId: string }> }
) {
  try {
    const { courseId } = await params;
    if (!courseId || courseId === 'undefined') {
      return NextResponse.json({ error: 'Invalid course ID' }, { status: 400 });
    }

    await connectDB();

    const sql = `SELECT * FROM courses WHERE id = $courseId`;
    const result = await db.query(sql, { courseId: `courses:${courseId}` });
    console.log('Raw course query result:', result);

    let course: Course | null = null;
    if (Array.isArray(result) && result[0] && Array.isArray(result[0].result)) {
      course = result[0].result[0] || null;
    } else if (Array.isArray(result)) {
      course = result[0] || null;
    }

    console.log('Processed course:', course);

    if (!course) {
      return NextResponse.json({ error: 'Course not found' }, { status: 404 });
    }

    return NextResponse.json(course, { status: 200 });
  } catch (error: any) {
    console.error(`Error fetching course ${courseId}:`, error.message);
    return NextResponse.json(
      { error: 'Internal server error', details: error.message },
      { status: 500 }
    );
  }
}

export async function PUT(
  req: Request,
  { params }: { params: Promise<{ courseId: string }> }
) {
  try {
    const user = await currentUser();
    if (!user) {
      console.log('User not authenticated');
      return NextResponse.json({ error: 'User not authenticated' }, { status: 401 });
    }

    const isAdmin = user.publicMetadata?.role === 'admin';
    if (!isAdmin) {
      console.log('Unauthorized: User is not admin, role:', user.publicMetadata?.role);
      return NextResponse.json({ error: 'Unauthorized: Admin access required' }, { status: 403 });
    }

    const { courseId } = await params;
    if (!courseId || courseId === 'undefined') {
      return NextResponse.json({ error: 'Invalid course ID' }, { status: 400 });
    }

    const { title, description, image, icon } = await req.json();
    if (!title || !description || !image || !icon) {
      return NextResponse.json(
        { error: 'Title, description, image, and icon are required' },
        { status: 400 }
      );
    }

    await connectDB();
    const courseIdRecord = new RecordId('courses', courseId);

    const existingCourse = await db.select<Course>(courseIdRecord);
    if (!existingCourse) {
      console.log(`Course not found: ${courseIdRecord}`);
      return NextResponse.json({ error: 'Course not found' }, { status: 404 });
    }

    const patchData: Patch[] = [
      { op: 'replace', path: '/title', value: title },
      { op: 'replace', path: '/description', value: description },
      { op: 'replace', path: '/image', value: image },
      { op: 'replace', path: '/icon', value: icon },
    ];

    const updatedCourse = await db.patch(courseIdRecord, patchData);
    console.log('Updated course:', updatedCourse);

    return NextResponse.json(updatedCourse, { status: 200 });
  } catch (error: any) {
    console.error('Error updating course:', error.message);
    return NextResponse.json(
      { error: 'Failed to update course', details: error.message },
      { status: 500 }
    );
  }
}

app\courses\Courses.module.css
.container {
  padding: 2rem;
  max-width: 1200px;
  margin: 0 auto;
  min-height: calc(100vh - 80px);
  background-color: #f5f7fa;
  font-family: 'Inter', sans-serif;
}

.title {
  font-size: 2.25rem;
  font-weight: 700;
  color: #1f2937;
  margin-bottom: 2rem;
  text-align: center;
}

.grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
  gap: 1.5rem;
}

.card {
  background: white;
  border-radius: 12px;
  padding: 1rem;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  transition: all 0.3s ease;
  display: flex;
  flex-direction: column;
  overflow: hidden;
}

.card:hover {
  transform: translateY(-5px);
  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
}

.cardLink {
  display: contents;
  text-decoration: none;
}

.courseImage {
  width: 100%;
  object-fit: cover; /* Ensures image fills frame, may crop slightly to avoid distortion */
  border-radius: 8px;
  margin-bottom: 1rem;
  aspect-ratio: 16 / 9; /* Enforces consistent aspect ratio */
}

.cardContent {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
  flex-grow: 1;
  padding: 0 0.5rem;
}

.cardTitle {
  font-size: 1.4rem;
  font-weight: 600;
  color: #1f2937;
  margin-bottom: 0.5rem;
  line-height: 1.4;
}

.description {
  font-size: 0.95rem;
  color: #4b5563;
  margin-bottom: 1rem;
  flex-grow: 1;
  line-height: 1.5;
}

.button {
  background: linear-gradient(90deg, #3b82f6, #60a5fa);
  color: white;
  padding: 0.75rem 1.5rem;
  border-radius: 6px;
  text-decoration: none;
  font-size: 1rem;
  font-weight: 600;
  text-align: center;
  transition: all 0.3s ease;
}

.button:hover {
  background: linear-gradient(90deg, #2563eb, #3b82f6);
  transform: scale(1.05);
}

.deleteButton {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  background: linear-gradient(90deg, #dc2626, #f87171);
  color: white;
  padding: 0.75rem 1.5rem;
  border-radius: 6px;
  border: none;
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  transition: background 0.3s ease, transform 0.2s ease, box-shadow 0.2s ease;
  margin-top: 0.5rem;
  align-self: center;
}

.deleteButton::before {
  content: '\1F5D1'; /* Unicode for trash can icon */
  font-size: 1rem;
}

.deleteButton:hover {
  background: linear-gradient(90deg, #b91c1c, #dc2626);
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
}

.deleteButton:active {
  transform: translateY(0);
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.disabledButton {
  background-color: #a0aec0;
  color: white;
  padding: 0.75rem 1.5rem;
  border-radius: 6px;
  font-size: 1rem;
  font-weight: 600;
  cursor: not-allowed;
}

.loading,
.error,
.empty {
  font-size: 1.2rem;
  color: #4b5563;
  text-align: center;
  margin-top: 2rem;
}

.error {
  color: #dc2626;
}

.success {
  color: #16a34a;
  font-size: 1rem;
  margin-bottom: 1rem;
  text-align: center;
}

.signInPrompt {
  text-align: center;
  margin-top: 2rem;
}

.signInPrompt h2 {
  font-size: 1.5rem;
  color: #1f2937;
  margin-bottom: 1rem;
}

.signInButton {
  background: linear-gradient(90deg, #3b82f6, #60a5fa);
  color: white;
  padding: 0.75rem 1.5rem;
  border-radius: 6px;
  border: none;
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  transition: background-color 0.3s ease, transform 0.2s ease;
}

.signInButton:hover {
  background: linear-gradient(90deg, #2563eb, #3b82f6);
  transform: scale(1.05);
}

@media (max-width: 768px) {
  .container {
    padding: 1rem;
  }

  .title {
    font-size: 1.75rem;
  }

  .grid {
    grid-template-columns: 1fr;
  }

  .card {
    padding: 0.75rem;
  }

  .courseImage {
    height: 180px; /* Adjusted for smaller screens */
  }
}

@media (max-width: 480px) {
  .courseImage {
    height: 160px; /* Further adjusted for very small screens */
  }

  .cardTitle {
    font-size: 1.2rem;
  }

  .description {
    font-size: 0.9rem;
  }
}
.buttonContainer {
  display: flex;
  justify-content: center;
  gap: 1rem;
  margin-top: 1rem;
}

app\courses\page.tsx
'use client';

import { useEffect, useState } from 'react';
import Link from 'next/link';
import { SignedIn, SignedOut, SignInButton, useUser } from '@clerk/nextjs';
import styles from './Courses.module.css';
import { Course } from '@/types';

export default function Courses() {
  const [courses, setCourses] = useState<Course[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const { user } = useUser();

  useEffect(() => {
    async function fetchCourses() {
      try {
        const response = await fetch('/api/courses', {
          headers: {
            'Content-Type': 'application/json',
          },
        });
        console.log('Fetch response status:', response.status);
        if (!response.ok) {
          throw new Error('Failed to fetch courses');
        }
        const data = await response.json();
        console.log('Fetched courses:', data);

        const coursesArray = Array.isArray(data) ? data : [];
        setCourses(coursesArray);
      } catch (err: any) {
        setError(err.message);
        console.error('Fetch error:', err);
      } finally {
        setLoading(false);
      }
    }
    fetchCourses();
  }, []);

  const handleDeleteCourse = async (courseId: string) => {
    if (!confirm('Are you sure you want to delete this course?')) {
      return;
    }

    try {
      const res = await fetch(`/api/courses/${courseId}/delete`, {
        method: 'DELETE',
      });
      if (res.ok) {
        setSuccess('Course deleted successfully');
        setCourses((prev) => prev.filter((course) => {
          const id = typeof course.id === 'string'
            ? course.id.includes(':') ? course.id.split(':').pop() : course.id
            : String(course.id);
          return id !== courseId;
        }));
        setTimeout(() => setSuccess(null), 3000);
      } else {
        const errorData = await res.json();
        setError(errorData.error || 'Failed to delete course');
        setTimeout(() => setError(null), 3000);
      }
    } catch (err: any) {
      setError(err.message || 'Failed to delete course');
      setTimeout(() => setError(null), 3000);
    }
  };

  return (
    <div className={styles.container}>
      <SignedIn>
        {loading && <div className={styles.loading}>Loading...</div>}
        {error && <div className={styles.error}>{error}</div>}
        {success && <div className={styles.success}>{success}</div>}
        {!loading && !error && courses.length === 0 && (
          <div className={styles.empty}>No courses available.</div>
        )}
        {!loading && !error && courses.length > 0 && (
          <>
            <h1 className={styles.title}>Courses</h1>
            <div className={styles.grid}>
              {courses.map((course) => {
                let courseId = '';
                if (typeof course.id === 'string') {
                  const parts = course.id.split(':');
                  courseId = parts[parts.length - 1].replace(/⟩$/, '');
                } else {
                  courseId = String(course.id);
                }
                console.log('Rendering course:', course, 'Extracted courseId:', courseId);
                return (
                  <div key={courseId} className={styles.card}>
                    <Link
                      href={`/courses/${courseId}`}
                      className={styles.cardLink}
                    >
                      <img
                        src={course.image}
                        alt={course.title}
                        className={styles.courseImage}
                      />
                      <div className={styles.cardContent}>
                        <h2 className={styles.cardTitle}>{course.title}</h2>
                        <p className={styles.description}>{course.description}</p>
                      </div>
                    </Link>
                    {user && user.publicMetadata?.role === 'admin' && (
                      <div className={styles.buttonContainer}>
                        <Link href={`/courses/${courseId}/edit`}>
                          <button className={styles.button}>Update Course</button>
                        </Link>
                        <button
                          onClick={() => handleDeleteCourse(courseId)}
                          className={styles.deleteButton}
                        >
                          Delete Course
                        </button>
                      </div>
                    )}
                  </div>
                );
              })}
            </div>
          </>
        )}
      </SignedIn>
      <SignedOut>
        <div className={styles.signInPrompt}>
          <h2>Please sign in to view courses</h2>
          <SignInButton mode="modal">
            <button className={styles.signInButton}>Sign In</button>
          </SignInButton>
        </div>
      </SignedOut>
    </div>
  );
}

app\courses\[courseId]\CourseDetail.module.css
.container {
  padding: 2.5rem;
  max-width: 1280px;
  margin: 0 auto;
  min-height: calc(100vh - 80px);
  background: linear-gradient(180deg, #f5f7fa 0%, #e2e8f0 100%);
  font-family: 'Inter', sans-serif;
}

.title {
  font-size: 2.5rem;
  font-weight: 800;
  color: #1f2937;
  margin-bottom: 2.5rem;
  text-align: center;
  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
}

.grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
  gap: 2rem;
  padding: 0 1rem;
}

.card {
  background: white;
  border-radius: 16px;
  padding: 1.5rem;
  box-shadow: 0 6px 16px rgba(0, 0, 0, 0.12);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  display: flex;
  flex-direction: column;
  overflow: hidden;
  border: 1px solid #e5e7eb;
}

.card:hover {
  transform: translateY(-8px) scale(1.02);
  box-shadow: 0 12px 24px rgba(0, 0, 0, 0.2);
}

.cardLink {
  display: contents;
  text-decoration: none;
}

.image {
  width: 100%;
  object-fit: cover;
  border-radius: 12px;
  margin-bottom: 1.5rem;
  aspect-ratio: 16 / 9;
  transition: transform 0.3s ease;
}

.image:hover {
  transform: scale(1.05);
}

.cardContent {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
  flex-grow: 1;
  padding: 0 0.75rem;
}

.cardTitle {
  display: flex;
  justify-content: center;
  font-size: 1.6rem;
  font-weight: 700;
  color: #1f2937;
  margin-bottom: 0.75rem;
  line-height: 1.3;
}

.description {
  font-size: 1rem;
  color: #4b5563;
  margin-bottom: 1.5rem;
  flex-grow: 1;
  line-height: 1.6;
}

.button {
  background: linear-gradient(90deg, #3b82f6, #60a5fa);
  color: white;
  padding: 0.75rem 1.5rem;
  border-radius: 8px;
  text-decoration: none;
  font-size: 1.1rem;
  font-weight: 600;
  text-align: center;
  transition: all 0.3s ease;
  border: none;
  cursor: pointer;
}

.button:hover {
  background: linear-gradient(90deg, #2563eb, #3b82f6);
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

.deleteButton {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  background: linear-gradient(90deg, #dc2626, #f87171);
  color: white;
  padding: 0.75rem 1.5rem;
  border-radius: 8px;
  border: none;
  font-size: 1.1rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  margin-top: 1rem;
  align-self: center;
}

.deleteButton::before {
  content: '\1F5D1'; /* Unicode for trash can icon */
  font-size: 1.1rem;
}

.deleteButton:hover {
  background: linear-gradient(90deg, #b91c1c, #dc2626);
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

.deleteButton:active {
  transform: translateY(0);
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
}

.disabledButton {
  background: #a0aec0;
  color: white;
  padding: 0.75rem 1.5rem;
  border-radius: 8px;
  font-size: 1.1rem;
  font-weight: 600;
  cursor: not-allowed;
  border: none;
}

.loading,
.error,
.empty {
  font-size: 1.3rem;
  color: #4b5563;
  text-align: center;
  margin-top: 3rem;
  font-weight: 500;
}

.error {
  color: #dc2626;
}

.success {
  color: #16a34a;
  font-size: 1.2rem;
  margin-bottom: 1.5rem;
  text-align: center;
  font-weight: 500;
}

.signInPrompt {
  text-align: center;
  margin-top: 3rem;
  padding: 2rem;
  background: white;
  border-radius: 12px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.signInPrompt h2 {
  font-size: 1.75rem;
  color: #1f2937;
  margin-bottom: 1.5rem;
  font-weight: 700;
}

.signInButton {
  background: linear-gradient(90deg, #3b82f6, #60a5fa);
  color: white;
  padding: 0.75rem 2rem;
  border-radius: 8px;
  border: none;
  font-size: 1.1rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
}

.signInButton:hover {
  background: linear-gradient(90deg, #2563eb, #3b82f6);
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

@media (max-width: 768px) {
  .container {
    padding: 1.5rem;
  }

  .title {
    font-size: 2rem;
  }

  .grid {
    grid-template-columns: 1fr;
    gap: 1.5rem;
  }

  .card {
    padding: 1rem;
  }

  .image {
    height: 180px;
  }

  .cardTitle {
    font-size: 1.4rem;
  }

  .description {
    font-size: 0.95rem;
  }
}

@media (max-width: 480px) {
  .container {
    padding: 1rem;
  }

  .title {
    font-size: 1.75rem;
  }

  .image {
    height: 160px;
  }

  .cardTitle {
    font-size: 1.3rem;
  }

  .description {
    font-size: 0.9rem;
  }

  .button,
  .deleteButton,
  .signInButton {
    font-size: 1rem;
    padding: 0.65rem 1.25rem;
  }
}
.buttonContainer {
  display: flex;
  justify-content: center;
  gap: 1rem;
  margin-top: 1rem;
}

.formContainer {
  background: white;
  border-radius: 12px;
  padding: 2rem;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  margin-bottom: 2rem;
}

.form {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
}

.formGroup {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.formGroup label {
  font-size: 1rem;
  font-weight: 500;
  color: #1f2937;
}

.formGroup input,
.formGroup textarea {
  padding: 0.75rem;
  border: 1px solid #d1d5db;
  border-radius: 6px;
  font-size: 1rem;
  color: #1f2937;
  width: 100%;
  transition: border-color 0.2s ease;
}

.formGroup input:focus,
.formGroup textarea:focus {
  outline: none;
  border-color: #3b82f6;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

app\courses\[courseId]\edit\page.tsx
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useParams } from 'next/navigation';
import styles from '../CourseDetail.module.css';
import { Course } from '@/types';

export default function CourseEdit() {
  const router = useRouter();
  const params = useParams();
  const [course, setCourse] = useState<Course | null>(null);
  const [newTitle, setNewTitle] = useState<string>('');
  const [newDescription, setNewDescription] = useState<string>('');
  const [newImage, setNewImage] = useState<string>('');
  const [newIcon, setNewIcon] = useState<string>('');
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);

  useEffect(() => {
    if (!params?.courseId) return;

    const fetchCourse = async () => {
      try {
        const res = await fetch(`/api/courses/${params.courseId}`);
        if (!res.ok) {
          throw new Error('Failed to fetch course');
        }
        const data = await res.json();
        setCourse(data);
        setNewTitle(data.title);
        setNewDescription(data.description);
        setNewImage(data.image);
        setNewIcon(data.icon);
      } catch (err: any) {
        setError(err.message);
      }
    };

    fetchCourse();
  }, [params?.courseId]);

  const updateCourse = async () => {
    try {
      const res = await fetch(`/api/courses/${params.courseId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          title: newTitle,
          description: newDescription,
          image: newImage,
          icon: newIcon,
        }),
      });

      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.error || 'Failed to update course');
      }

      setSuccess('Course updated successfully!');
      setTimeout(() => {
        setSuccess(null);
        router.push('/courses');
      }, 2000);
    } catch (err: any) {
      setError(err.message);
      setTimeout(() => setError(null), 3000);
    }
  };

  const goBack = () => {
    router.push('/courses');
  };

  if (!course) return <div className={styles.loading}>Loading...</div>;

  return (
    <div className={styles.container}>
      <h1 className={styles.title}>Edit Course</h1>

      {error && <div className={styles.error}>{error}</div>}
      {success && <div className={styles.success}>{success}</div>}

      <div className={styles.formContainer}>
        <div className={styles.form}>
          <div className={styles.formGroup}>
            <label htmlFor="title">Course Title</label>
            <input
              type="text"
              id="title"
              value={newTitle}
              onChange={(e) => setNewTitle(e.target.value)}
              className={styles.input}
            />
          </div>
          <div className={styles.formGroup}>
            <label htmlFor="description">Description</label>
            <textarea
              id="description"
              value={newDescription}
              onChange={(e) => setNewDescription(e.target.value)}
              className={styles.input}
            />
          </div>
          <div className={styles.formGroup}>
            <label htmlFor="image">Image URL</label>
            <input
              type="url"
              id="image"
              value={newImage}
              onChange={(e) => setNewImage(e.target.value)}
              className={styles.input}
            />
          </div>
          <div className={styles.formGroup}>
            <label htmlFor="icon">Icon URL</label>
            <input
              type="url"
              id="icon"
              value={newIcon}
              onChange={(e) => setNewIcon(e.target.value)}
              className={styles.input}
            />
          </div>
          <div className={styles.buttonContainer}>
            <button
              onClick={updateCourse}
              disabled={
                !(typeof newTitle === 'string' && newTitle.trim()) ||
                !(typeof newDescription === 'string' && newDescription.trim()) ||
                !(typeof newImage === 'string' && newImage.trim()) ||
                !(typeof newIcon === 'string' && newIcon.trim())
              }
              className={styles.button}
            >
              Update Course
            </button>
            <button onClick={goBack} className={styles.deleteButton}>
              Back
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}

app\courses\[courseId]\lessons\[lessonId]\edit\page.tsx
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useParams } from 'next/navigation';
import styles from '@/app/courses/[courseId]/CourseDetail.module.css';
import { Lesson } from '@/types';

export default function LessonDetail() {
  const router = useRouter();
  const params = useParams();
  const [lesson, setLesson] = useState<Lesson | null>(null);
  const [newTitle, setNewTitle] = useState<string>('');
  const [newContent, setNewContent] = useState<string>('');
  const [newThumbnail, setNewThumbnail] = useState<string>('');
  const [newVideoEmbed, setNewVideoEmbed] = useState<string>('');
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);

  useEffect(() => {
    if (!params?.courseId || !params?.lessonId) return;

    const fetchLesson = async () => {
      try {
        const res = await fetch(`/api/courses/${params.courseId}/lessons/${params.lessonId}`);
        if (!res.ok) {
          throw new Error('Failed to fetch lesson');
        }
        const data = await res.json();
        setLesson(data);
        setNewTitle(data.title);
        setNewContent(data.content);
        setNewThumbnail(data.thumbnail);
        setNewVideoEmbed(data.videoEmbed);
      } catch (err: any) {
        setError(err.message);
      }
    };

    fetchLesson();
  }, [params?.courseId, params?.lessonId]);

  const updateLesson = async () => {
    try {
      const res = await fetch(`/api/courses/${params.courseId}/lessons/${params.lessonId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          title: newTitle,
          content: newContent,
          thumbnail: newThumbnail,
          videoEmbed: newVideoEmbed,
        }),
      });

      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.error || 'Failed to update lesson');
      }

      setSuccess('Lesson updated successfully!');
      setTimeout(() => {
        setSuccess(null);
        router.push(`/courses/${params.courseId}`);
      }, 2000);
    } catch (err: any) {
      setError(err.message);
      setTimeout(() => setError(null), 3000);
    }
  };

  const goBack = () => {
    router.push(`/courses/${params.courseId}`);
  };

  if (!lesson) return <div className={styles.loading}>Loading...</div>;

  return (
    <div className={styles.container}>
      <h1 className={styles.title}>Lesson Details</h1>

      {error && <div className={styles.error}>{error}</div>}
      {success && <div className={styles.success}>{success}</div>}

      <div className={styles.formContainer}>
        <div className={styles.form}>
          <div className={styles.formGroup}>
            <label htmlFor="title">Lesson Title</label>
            <input
              type="text"
              id="title"
              value={newTitle}
              onChange={(e) => setNewTitle(e.target.value)}
              className={styles.input}
            />
          </div>
          <div className={styles.formGroup}>
            <label htmlFor="content">Content</label>
            <textarea
              id="content"
              value={newContent}
              onChange={(e) => setNewContent(e.target.value)}
              className={styles.input}
            />
          </div>
          <div className={styles.formGroup}>
            <label htmlFor="thumbnail">Thumbnail URL</label>
            <input
              type="url"
              id="thumbnail"
              value={newThumbnail}
              onChange={(e) => setNewThumbnail(e.target.value)}
              className={styles.input}
            />
          </div>
          <div className={styles.formGroup}>
            <label htmlFor="videoEmbed">Video Embed URL</label>
            <input
              type="url"
              id="videoEmbed"
              value={newVideoEmbed}
              onChange={(e) => setNewVideoEmbed(e.target.value)}
              className={styles.input}
            />
          </div>
          <div className={styles.buttonContainer}>
            <button
              onClick={updateLesson}
              disabled={!newTitle.trim() || !newContent.trim() || !newThumbnail.trim() || !newVideoEmbed.trim()}
              className={styles.button}
            >
              Update Lesson
            </button>
            <button onClick={goBack} className={styles.deleteButton}>
              Back
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}

app\courses\[courseId]\lessons\[lessonId]\page.tsx
'use client';

import { useEffect, useState } from 'react';
import styles from '../../../../styles/LessonDetail.module.css';
import Link from 'next/link';
import { Course, Lesson } from '@/types';

export default function LessonDetail({
  params,
}: {
  params: Promise<{ courseId: string; lessonId: string }>;
}) {
  const [course, setCourse] = useState<Course | null>(null);
  const [lesson, setLesson] = useState<Lesson | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    async function fetchData() {
      try {
        const { courseId, lessonId } = await params;
        const courseRes = await fetch(`/api/courses/${courseId}`);
        if (!courseRes.ok) {
          const errorData = await courseRes.json();
          throw new Error(errorData.error || 'Course not found');
        }
        const courseData = await courseRes.json();
        setCourse(courseData);

        const lessonRes = await fetch(`/api/courses/${courseId}/lessons/${lessonId}`);
        if (!lessonRes.ok) {
          const errorData = await lessonRes.json();
          throw new Error(errorData.error || 'Lesson not found');
        }
        const lessonData = await lessonRes.json();
        setLesson(lessonData);
      } catch (err: any) {
        setError(err.message);
        console.error('Fetch error:', err);
      } finally {
        setLoading(false);
      }
    }
    fetchData();
  }, [params]);

  if (loading) return <div className={styles.container}>Loading...</div>;
  if (error) return <div className={styles.container}>Error: {error}</div>;
  if (!course || !lesson) return <div className={styles.container}>Lesson or Course not found</div>;

  const courseId = course?.id 
    ? (typeof course.id === 'string' 
        ? course.id.includes(':') 
          ? course.id.split(':').pop() || course.id // حذف پیشوند course:
          : course.id
        : String(course.id))
    : '';

  const lessonCourseId = typeof lesson.course === 'string' 
    ? lesson.course.includes(':') 
      ? lesson.course.split(':').pop() || lesson.course // حذف پیشوند course:
      : lesson.course
    : String(lesson.course);

  console.log('Client-side comparison - lessonCourseId:', lessonCourseId, 'courseId:', courseId);


  return (
    <div className={styles.container}>
      <div className={styles.thumbnailBackground} style={{ backgroundImage: `url(${lesson.thumbnail})` }}></div>
      <div className={styles.contentWrapper}>
        <Link href={`/courses/${courseId}`} className={styles.backLink}>
          Back to {course.title}
        </Link>
        <div className={styles.lessonHeader}>
          <h1 className={styles.title}>{lesson.title}</h1>
        </div>
        <div className={styles.lessonContent}>
          <div className={styles.videoWrapper}>
            <iframe
              frameBorder="0"
              width="100%"
              height="400px"
              src={lesson.videoEmbed}
              allowFullScreen={true}
              webkitallowfullscreen={true}
              mozallowfullscreen={true}
            ></iframe>
          </div>
          <p className={styles.content}>{lesson.content}</p>
        </div>
      </div>
    </div>
  );
}

app\courses\[courseId]\page.tsx
'use client';

import { useEffect, useState } from 'react';
import { useParams } from 'next/navigation';
import Link from 'next/link';
import { SignedIn, SignedOut, SignInButton, useUser } from '@clerk/nextjs';
import styles from './CourseDetail.module.css';
import { Course, Lesson } from '@/types';

export default function CourseDetail() {
  const [course, setCourse] = useState<Course | null>(null);
  const [lessons, setLessons] = useState<Lesson[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const { user } = useUser();
  const params = useParams();

  useEffect(() => {
    async function fetchCourseAndLessons() {
      try {
        const courseId = params.courseId;
        console.log('Fetching course with ID:', courseId);

        const courseResponse = await fetch(`/api/courses/${courseId}`);
        if (!courseResponse.ok) {
          throw new Error('Failed to fetch course');
        }
        const courseData = await courseResponse.json();
        setCourse(courseData);

        const lessonsResponse = await fetch(`/api/courses/${courseId}/lessons`);
        if (!lessonsResponse.ok) {
          throw new Error('Failed to fetch lessons');
        }
        const lessonsData = await lessonsResponse.json();
        console.log('Fetched lessons:', lessonsData);
        setLessons(Array.isArray(lessonsData) ? lessonsData : []);
      } catch (err: any) {
        setError(err.message);
        console.error('Fetch error:', err);
      } finally {
        setLoading(false);
      }
    }
    fetchCourseAndLessons();
  }, [params.courseId]);

  const handleDeleteLesson = async (lessonId: string) => {
    if (!confirm('Are you sure you want to delete this lesson?')) {
      return;
    }

    try {
      const res = await fetch(`/api/courses/${params.courseId}/lessons/${lessonId}/delete`, {
        method: 'DELETE',
      });
      if (res.ok) {
        setSuccess('Lesson deleted successfully');
        setLessons((prev) => prev.filter((lesson) => {
          const id = typeof lesson.id === 'string'
            ? lesson.id.includes(':') ? lesson.id.split(':').pop() : lesson.id
            : String(lesson.id);
          return id !== lessonId;
        }));
        setTimeout(() => setSuccess(null), 3000);
      } else {
        const errorData = await res.json();
        setError(errorData.error || 'Failed to delete lesson');
        setTimeout(() => setError(null), 3000);
      }
    } catch (err: any) {
      setError(err.message || 'Failed to delete lesson');
      setTimeout(() => setError(null), 3000);
    }
  };

  if (loading) return <div className={styles.loading}>Loading...</div>;
  if (!course) return <div className={styles.error}>Course not found</div>;

  return (
    <div className={styles.container}>
      <SignedIn>
        {error && <div className={styles.error}>{error}</div>}
        {success && <div className={styles.success}>{success}</div>}
        <h1 className={styles.title}>{course.title}</h1>
        <p className={styles.description}>{course.description}</p>
        <div className={styles.grid}>
          {lessons.length === 0 && (
            <div className={styles.empty}>No lessons available.</div>
          )}
          {lessons.map((lesson) => {
            let lessonId = '';
            if (typeof lesson.id === 'string') {
              const parts = lesson.id.split(':');
              lessonId = parts[parts.length - 1].replace(/⟩$/, '');
            } else {
              lessonId = String(lesson.id);
            }
            console.log('Rendering lesson:', lesson, 'Extracted lessonId:', lessonId);
            return (
              <div key={lessonId} className={styles.card}>
                <Link
                  href={`/courses/${params.courseId}/lessons/${lessonId}`}
                  className={styles.cardLink}
                >
                  <img
                    src={lesson.thumbnail}
                    alt={lesson.title}
                    className={styles.image}
                  />
                  <div className={styles.cardContent}>
                    <h2 className={styles.cardTitle}>{lesson.title}</h2>
                    <p className={styles.description}>{lesson.content}</p>
                  </div>
                </Link>
                {user && user.publicMetadata?.role === 'admin' && (
                  <div className={styles.buttonContainer}>
                    <Link href={`/courses/${params.courseId}/lessons/${lessonId}/edit`}>
                      <button className={styles.button}>Update Lesson</button>
                    </Link>
                    <button
                      onClick={() => handleDeleteLesson(lessonId)}
                      className={styles.deleteButton}
                    >
                      Delete Lesson
                    </button>
                  </div>
                )}
              </div>
            );
          })}
        </div>
      </SignedIn>
      <SignedOut>
        <div className={styles.signInPrompt}>
          <h2>Please sign in to view course details</h2>
          <SignInButton mode="modal">
            <button className={styles.signInButton}>Sign In</button>
          </SignInButton>
        </div>
      </SignedOut>
    </div>
  );
}

app\globals.css
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: 'Inter', sans-serif;
  background-color: #F8FAFC;
  color: #1F2937;
  line-height: 1.6;
}

a {
  text-decoration: none;
  color: inherit;
}

app\layout.tsx
import './globals.css';
import Header from '../components/Header';
import { ClerkProvider } from '@clerk/nextjs';
import styles from './styles/layout.module.css';

export const metadata = {
  title: 'EduPlatform',
  description: 'A simple online learning platform',
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <ClerkProvider>
      <html lang="en">
        <body>
          <div className={styles.container}>
            <Header />
            <main className={styles.main}>{children}</main>
          </div>
        </body>
      </html>
    </ClerkProvider>
  );
}

app\page.module.css
.page {
  --gray-rgb: 0, 0, 0;
  --gray-alpha-200: rgba(var(--gray-rgb), 0.08);
  --gray-alpha-100: rgba(var(--gray-rgb), 0.05);

  --button-primary-hover: #383838;
  --button-secondary-hover: #f2f2f2;

  display: grid;
  grid-template-rows: 20px 1fr 20px;
  align-items: center;
  justify-items: center;
  min-height: 100svh;
  padding: 80px;
  gap: 64px;
  font-family: var(--font-geist-sans);
}

@media (prefers-color-scheme: dark) {
  .page {
    --gray-rgb: 255, 255, 255;
    --gray-alpha-200: rgba(var(--gray-rgb), 0.145);
    --gray-alpha-100: rgba(var(--gray-rgb), 0.06);

    --button-primary-hover: #ccc;
    --button-secondary-hover: #1a1a1a;
  }
}

.main {
  display: flex;
  flex-direction: column;
  gap: 32px;
  grid-row-start: 2;
}

.main ol {
  font-family: var(--font-geist-mono);
  padding-left: 0;
  margin: 0;
  font-size: 14px;
  line-height: 24px;
  letter-spacing: -0.01em;
  list-style-position: inside;
}

.main li:not(:last-of-type) {
  margin-bottom: 8px;
}

.main code {
  font-family: inherit;
  background: var(--gray-alpha-100);
  padding: 2px 4px;
  border-radius: 4px;
  font-weight: 600;
}

.ctas {
  display: flex;
  gap: 16px;
}

.ctas a {
  appearance: none;
  border-radius: 128px;
  height: 48px;
  padding: 0 20px;
  border: none;
  border: 1px solid transparent;
  transition:
    background 0.2s,
    color 0.2s,
    border-color 0.2s;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 16px;
  line-height: 20px;
  font-weight: 500;
}

a.primary {
  background: var(--foreground);
  color: var(--background);
  gap: 8px;
}

a.secondary {
  border-color: var(--gray-alpha-200);
  min-width: 158px;
}

.footer {
  grid-row-start: 3;
  display: flex;
  gap: 24px;
}

.footer a {
  display: flex;
  align-items: center;
  gap: 8px;
}

.footer img {
  flex-shrink: 0;
}

/* Enable hover only on non-touch devices */
@media (hover: hover) and (pointer: fine) {
  a.primary:hover {
    background: var(--button-primary-hover);
    border-color: transparent;
  }

  a.secondary:hover {
    background: var(--button-secondary-hover);
    border-color: transparent;
  }

  .footer a:hover {
    text-decoration: underline;
    text-underline-offset: 4px;
  }
}

@media (max-width: 600px) {
  .page {
    padding: 32px;
    padding-bottom: 80px;
  }

  .main {
    align-items: center;
  }

  .main ol {
    text-align: center;
  }

  .ctas {
    flex-direction: column;
  }

  .ctas a {
    font-size: 14px;
    height: 40px;
    padding: 0 16px;
  }

  a.secondary {
    min-width: auto;
  }

  .footer {
    flex-wrap: wrap;
    align-items: center;
    justify-content: center;
  }
}

@media (prefers-color-scheme: dark) {
  .logo {
    filter: invert();
  }
}


app\page.tsx
'use client';

import { useEffect, useState } from 'react';
import Link from 'next/link';
import styles from './styles/Home.module.css';
import { Course } from '@/types';

export default function Home() {
  const [courses, setCourses] = useState<Course[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    async function fetchCourses() {
      try {
        const response = await fetch('/api/courses?limit=3', {
          headers: {
            'Content-Type': 'application/json',
          },
        });
        if (!response.ok) {
          throw new Error('Failed to fetch courses');
        }
        const data = await response.json();
        setCourses(Array.isArray(data) ? data : []);
      } catch (err: any) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    }
    fetchCourses();
  }, []);

  return (
    <div className={styles.container}>
      <section className={styles.hero}>
        <h1>Welcome to EduPlatform!</h1>
        <p>Learn new skills with our diverse online courses.</p>
        <Link href="/courses" className={styles.ctaButton}>
          Explore Courses
        </Link>
      </section>
      <section className={styles.coursesPreview}>
        <h2>Featured Courses</h2>
        {loading && <div className={styles.courseGrid}>Loading...</div>}
        {error && <div className={styles.courseGrid}>Error: {error}</div>}
        {!loading && !error && courses.length === 0 && (
          <div className={styles.courseGrid}>No courses available.</div>
        )}
        {!loading && !error && courses.length > 0 && (
          <div className={styles.courseGrid}>
            {courses.map((course) => {
              const courseId = typeof course.id === 'string'
                ? course.id.includes(':')
                  ? course.id.split(':').pop()?.replace(/[^\w\-]/g, '') || course.id
                  : course.id
                : String(course.id);
              return (
                <Link href={`/courses/${courseId}`} key={courseId} className={styles.courseCard}>
                  <h3>{course.title}</h3>
                  <p>{course.description}</p>
                </Link>
              );
            })}
          </div>
        )}
      </section>
    </div>
  );
}

app\styles\CourseDetail.module.css
.container {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
}

.courseHeader {
  text-align: center;
  margin-bottom: 3rem;
  position: relative;
}

.courseIcon {
  width: 60px;
  height: 60px;
  position: absolute;
  top: -30px;
  left: 50%;
  transform: translateX(-50%);
  background-color: rgba(255, 255, 255, 0.9);
  border-radius: 50%;
  padding: 0.5rem;
}

.courseImage {
  width: 100%;
  max-width: 600px;
  height: auto;
  border-radius: 12px;
  margin-bottom: 1.5rem;
}

.courseHeader h1 {
  font-size: 2.5rem;
  font-weight: 700;
  color: #1F2937;
  margin-bottom: 1rem;
}

.courseHeader p {
  font-size: 1.2rem;
  color: #6B7280;
  max-width: 800px;
  margin: 0 auto;
}

.container h2 {
  font-size: 2rem;
  font-weight: 600;
  color: #1F2937;
  margin-bottom: 1.5rem;
}

.lessonList {
  list-style: none;
  display: grid;
  gap: 1.5rem;
}

.lessonItem {
  background: linear-gradient(145deg, #ffffff, #f0f4f8);
  padding: 1.5rem;
  border-radius: 12px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  display: flex;
  gap: 1.5rem;
  transition: transform 0.3s ease;
}

.lessonItem:hover {
  transform: translateY(-3px);
}

.lessonThumbnail {
  width: 120px;
  height: 80px;
  object-fit: cover;
  border-radius: 8px;
}

.lessonContent {
  flex: 1;
}

.lessonContent h3 {
  font-size: 1.5rem;
  font-weight: 600;
  color: #1F2937;
  margin-bottom: 0.5rem;
}

.lessonContent p {
  font-size: 1rem;
  color: #6B7280;
  margin-bottom: 1rem;
}

.lessonLink {
  display: inline-block;
  padding: 0.5rem 1rem;
  background: linear-gradient(90deg, #4C6EF5, #F472B6);
  color: #ffffff;
  border-radius: 8px;
  font-weight: 500;
  transition: transform 0.2s ease, box-shadow 0.2s ease;
  text-decoration: none;
}

.lessonLink:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
}

.disabledLessonLink {
  display: inline-block;
  padding: 0.5rem 1rem;
  background: #9CA3AF;
  color: #ffffff;
  border-radius: 8px;
  font-weight: 500;
  cursor: not-allowed;
  opacity: 0.7;
}

@media (max-width: 768px) {
  .container {
    padding: 1rem;
  }

  .courseHeader h1 {
    font-size: 2rem;
  }

  .courseHeader p {
    font-size: 1rem;
  }

  .courseImage {
    max-width: 100%;
  }

  .lessonItem {
    flex-direction: column;
  }

  .lessonThumbnail {
    width: 100%;
    height: 120px;
  }
}

app\styles\Courses.module.css
.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 2rem;
}

.grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  gap: 2rem;
}

.card {
  background: white;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  transition: transform 0.3s ease;
  text-decoration: none;
  color: inherit;
}

.card:hover {
  transform: translateY(-5px);
}

.courseImage {
  width: 100%;
  height: 150px;
  object-fit: cover;
}

.cardContent {
  padding: 1rem;
}

.title {
  font-size: 1.5rem;
  margin: 0 0 0.5rem;
}

.description {
  font-size: 1rem;
  color: #666;
}

.loading,
.error,
.empty {
  text-align: center;
  font-size: 1.2rem;
  margin: 2rem 0;
}

.error {
  color: #e74c3c;
}

.success {
  text-align: center;
  font-size: 1.2rem;
  margin: 2rem 0;
  color: #2ecc71;
}

.signInPrompt {
  text-align: center;
  margin: 2rem 0;
}

.signInPrompt h2 {
  font-size: 1.5rem;
  margin-bottom: 1rem;
}

.signInButton {
  background-color: #4C6EF5;
  color: white;
  padding: 0.75rem 1.5rem;
  border: none;
  border-radius: 4px;
  font-size: 1rem;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.signInButton:hover {
  background-color: #3b5bdb;
}

.form {
  background: white;
  padding: 2rem;
  border-radius: 8px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  max-width: 600px;
  margin: 0 auto;
}

.formGroup {
  margin-bottom: 1.5rem;
}

.formGroup label {
  display: block;
  font-size: 1rem;
  font-weight: 500;
  color: #1F2937;
  margin-bottom: 0.5rem;
}

.formGroup input,
.formGroup select {
  width: 100%;
  padding: 0.75rem;
  border: 1px solid #d1d5db;
  border-radius: 6px;
  font-size: 1rem;
  color: #1F2937;
}

.formGroup input:focus,
.formGroup select:focus {
  outline: none;
  border-color: #4C6EF5;
  box-shadow: 0 0 0 3px rgba(76, 110, 245, 0.1);
}

.button {
  background-color: #4C6EF5;
  color: white;
  padding: 0.75rem 1.5rem;
  border: none;
  border-radius: 6px;
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  transition: background-color 0.3s ease, transform 0.2s ease;
  
}

.button:hover {
  background-color: #3b5bdb;
  transform: scale(1.05);
}

@media (max-width: 768px) {
  .form {
    padding: 1.5rem;
  }

  .formGroup input,
  .formGroup select {
    padding: 0.5rem;
  }
}

app\styles\Footer.module.css
.footer {
  text-align: center;
  padding: 1.5rem;
  background-color: #1F2937;
  color: #F8FAFC;
  font-size: 0.9rem;
}

app\styles\Header.module.css
.header {
  background-color: #ffffff;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  position: sticky;
  top: 0;
  z-index: 1000;
  transition: background-color 0.3s ease;
}

.header.scrolled {
  background-color: rgba(255, 255, 255, 0.95);
}

.nav {
  max-width: 1280px;
  margin: 0 auto;
  padding: 1rem 2rem;
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.logoContainer {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.logoText {
  font-size: 1.5rem;
  font-weight: 700;
  color: #1F2937;
}

.desktopMenu {
  display: flex;
  align-items: center;
  gap: 2rem;
}

.navList {
  display: flex;
  gap: 1.5rem;
  list-style: none;
}

.navLink {
  color: #1F2937;
  font-weight: 500;
  text-decoration: none;
  transition: color 0.3s ease;
}

.navLink:hover {
  color: #4C6EF5;
}

.mobileMenuButton {
  display: none;
  background: none;
  border: none;
  cursor: pointer;
}

.mobileMenu {
  display: none;
}

.mobileMenu.active {
  display: block;
  position: absolute;
  top: 100%;
  left: 0;
  width: 100%;
  background-color: #ffffff;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.mobileMenuContent {
  padding: 1rem 2rem;
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

@media (max-width: 768px) {
  .desktopMenu {
    display: none;
  }

  .mobileMenuButton {
    display: block;
  }

  .mobileMenu.active .navList {
    flex-direction: column;
    align-items: center;
  }

  .navLink {
    font-size: 1.1rem;
  }
}

app\styles\Home.module.css
.container {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
}

.hero {
  text-align: center;
  padding: 4rem 2rem;
  background: linear-gradient(135deg, #4C6EF5 0%, #F472B6 100%);
  color: #ffffff;
  border-radius: 12px;
  margin-bottom: 3rem;
}

.hero h1 {
  font-size: 3rem;
  font-weight: 700;
  margin-bottom: 1rem;
}

.hero p {
  font-size: 1.25rem;
  margin-bottom: 2rem;
}

.ctaButton {
  display: inline-block;
  padding: 0.75rem 2rem;
  background-color: #ffffff;
  color: #4C6EF5;
  font-weight: 600;
  border-radius: 8px;
  transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.ctaButton:hover {
  transform: translateY(-3px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

.coursesPreview {
  padding: 2rem 0;
}

.coursesPreview h2 {
  font-size: 2rem;
  font-weight: 600;
  margin-bottom: 2rem;
  text-align: center;
}

.courseGrid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
  gap: 1.5rem;
}

.courseCard {
  background-color: #ffffff;
  padding: 1.5rem;
  border-radius: 12px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  text-align: center;
}

.courseCard:hover {
  transform: translateY(-5px);
  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
}

.courseCard h3 {
  font-size: 1.5rem;
  font-weight: 600;
  margin-bottom: 0.5rem;
}

.courseCard p {
  font-size: 1rem;
  color: #6B7280;
}

@media (max-width: 768px) {
  .hero h1 {
    font-size: 2rem;
  }

  .hero p {
    font-size: 1rem;
  }

  .container {
    padding: 1rem;
  }
}

app\styles\layout.module.css
.container {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

.main {
  flex: 1;
  padding: 2rem;
}

@media (max-width: 768px) {
  .main {
    padding: 1rem;
  }
}

app\styles\LessonDetail.module.css
.container {
  position: relative;
  min-height: 100vh;
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  overflow: hidden;
}

.thumbnailBackground {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-size: cover;
  background-position: center;
  filter: blur(8px) opacity(0.8);
  z-index: -1;
}

.contentWrapper {
  position: relative;
  z-index: 1;
  background: rgba(255, 255, 255, 0.95);
  border-radius: 12px;
  padding: 2rem;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.backLink {
  display: inline-block;
  margin-bottom: 1.5rem;
  color: #4C6EF5;
  font-weight: 500;
  font-size: 1rem;
  transition: color 0.3s ease, transform 0.2s ease;
}

.backLink:hover {
  color: #3b82f6;
  transform: translateX(-5px);
}

.lessonHeader {
  text-align: center;
  margin-bottom: 2rem;
}

.lessonHeader h1 {
  font-size: 2.5rem;
  font-weight: 700;
  color: #1F2937;
  margin-bottom: 1rem;
}

.lessonContent {
  background: linear-gradient(145deg, #ffffff, #f0f4f8);
  padding: 2rem;
  border-radius: 12px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  transition: transform 0.3s ease;
}

.lessonContent:hover {
  transform: translateY(-3px);
}

.videoWrapper {
  position: relative;
  padding-bottom: 56.25%; /* برای نسبت 16:9 */
  height: 0;
  overflow: hidden;
  border-radius: 12px;
  margin-bottom: 1.5rem;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.videoWrapper iframe {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border: none;
}

.lessonContent p {
  font-size: 1.1rem;
  color: #6B7280;
  line-height: 1.8;
  margin-bottom: 1.5rem;
}

@media (max-width: 768px) {
  .container {
    padding: 1rem;
  }

  .contentWrapper {
    padding: 1.5rem;
  }

  .lessonHeader h1 {
    font-size: 2rem;
  }

  .lessonContent {
    padding: 1.5rem;
  }

  .videoWrapper {
    padding-bottom: 75%; /* نسبت 4:3 برای موبایل */
  }
}

@media (max-width: 480px) {
  .lessonHeader h1 {
    font-size: 1.8rem;
  }

  .backLink {
    font-size: 0.9rem;
  }
}

components\AuthButtons.tsx
'use client';

import { SignInButton, SignedIn, SignedOut, UserButton, SignUpButton, useUser } from '@clerk/nextjs';
import Link from 'next/link';
import styles from '../styles/authButtons.module.css';

export default function AuthButtons() {
  const { user } = useUser();
  const isAdmin = user?.publicMetadata?.role === 'admin';

  return (
    <div className={styles.authButtons}>
      <SignedIn>
        <div className={styles.authButtons}>
          <Link href="/courses">
            <button className={styles.clerkButton}>Courses</button>
          </Link>
          <UserButton afterSignOutUrl="/" />
          {isAdmin && (
            <Link href="/admin">
              <button className={styles.clerkButton}>Create New Lesson</button>
            </Link>
          )}
        </div>
      </SignedIn>
      <SignedOut>
        <div className={styles.authButtons}>
          <SignInButton mode="modal">
            <button className={styles.clerkButton}>Sign In</button>
          </SignInButton>
          <SignUpButton mode="modal">
            <button className={styles.clerkButton}>Sign Up</button>
          </SignUpButton>
        </div>
      </SignedOut>
    </div>
  );
}

components\Footer.tsx
import styles from '../app/styles/Footer.module.css';

export default function Footer() {
  return (
    <footer className={styles.footer}>
      <p>© 2025 EduPlatform. All rights reserved.</p>
    </footer>
  );
}

components\Header.tsx
"use client";

import { useState, useEffect } from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { Menu, X } from 'lucide-react';
import AuthButtons from './AuthButtons';
import styles from '../app/styles/Header.module.css';

const Header: React.FC = () => {
  const [isScrolled, setIsScrolled] = useState(false);
  const [isMenuOpen, setIsMenuOpen] = useState(false);

  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 50);
    };
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  const toggleMenu = () => setIsMenuOpen(!isMenuOpen);

  return (
    <header className={`${styles.header} ${isScrolled ? styles.scrolled : ''}`}>
      <nav className={styles.nav}>
        <div className={styles.logoContainer}>
          <Image src="/logo.png" alt="EduPlatform Logo" width={40} height={40} />
          <h1 className={styles.logoText}>EduPlatform</h1>
        </div>

        {/* Desktop Menu */}
        <div className={styles.desktopMenu}>
          <ul className={styles.navList}>
            <li>
              <Link href="/" className={styles.navLink}>
                Home
              </Link>
            </li>
            <li>
              <Link href="/courses" className={styles.navLink}>
                Courses
              </Link>
            </li>
          </ul>
          <AuthButtons />
        </div>

        {/* Mobile Menu Button */}
        <button className={styles.mobileMenuButton} onClick={toggleMenu}>
          {isMenuOpen ? <X size={24} /> : <Menu size={24} />}
        </button>
      </nav>

      {/* Mobile Menu */}
      <div className={`${styles.mobileMenu} ${isMenuOpen ? styles.active : ''}`}>
        <div className={styles.mobileMenuContent}>
          <ul className={styles.navList}>
            <li>
              <Link href="/" className={styles.navLink} onClick={toggleMenu}>
                Home
              </Link>
            </li>
            <li>
              <Link href="/courses" className={styles.navLink} onClick={toggleMenu}>
                Courses
              </Link>
            </li>
          </ul>
          <AuthButtons />
        </div>
      </div>
    </header>
  );
};

export default Header;

data\courses.ts
export interface Lesson {
  id: string;
  title: string;
  content: string;
  thumbnail: string;
  videoEmbed: string;
}

export interface Course {
  id: string;
  title: string;
  description: string;
  image: string;
  icon: string;
  lessons: Lesson[];
}

export const courses: Course[] = [
  {
    id: "mathematics",
    title: "Mathematics",
    description: "Master the fundamentals of mathematics, from algebra to calculus.",
    image: "https://images.unsplash.com/photo-1509228627857-449b6e4d0b1e?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80",
    icon: "https://img.icons8.com/ios-filled/50/4C6EF5/calculator.png",
    lessons: [
      {
        id: "algebra",
        title: "Algebra",
        content: "Learn about equations, polynomials, and functions in this comprehensive Algebra course.",
        thumbnail: "https://images.unsplash.com/photo-1611080626919-7cf5a9dbab5b?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&q=80",
        videoEmbed: "https://www.aparat.com/video/video/embed/videohash/q65e4zl/vt/frame",
      },
      {
        id: "geometry",
        title: "Geometry",
        content: "Explore shapes, angles, and spatial reasoning in this engaging Geometry course.",
        thumbnail: "https://images.unsplash.com/photo-1635070664753-803b3b247e76?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&q=80",
        videoEmbed: "https://www.aparat.com/video/video/embed/videohash/q65e4zl/vt/frame",
      },
      {
        id: "calculus",
        title: "Calculus",
        content: "Understand limits, derivatives, and integrals in this foundational Calculus course.",
        thumbnail: "https://images.unsplash.com/photo-1611078489932-9b6177f3b3c6?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&q=80",
        videoEmbed: "https://www.aparat.com/video/video/embed/videohash/q65e4zl/vt/frame",
      },
    ],
  },
  {
    id: "physics",
    title: "Physics",
    description: "Dive into the laws of the universe, from mechanics to electromagnetism.",
    image: "https://images.unsplash.com/photo-1636466497217-26a7d7cd6c55?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80",
    icon: "https://img.icons8.com/ios-filled/50/4C6EF5/planet.png",
    lessons: [
      {
        id: "mechanics",
        title: "Mechanics",
        content: "Study motion, forces, and energy in this Mechanics course.",
        thumbnail: "https://images.unsplash.com/photo-1628595351029-c2bf175a5903?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&q=80",
        videoEmbed: "https://www.aparat.com/video/video/embed/videohash/q65e4zl/vt/frame",
      },
      {
        id: "therkingdomics",
        title: "Thermodynamics",
        content: "Learn about heat, energy, and entropy in this Thermodynamics course.",
        thumbnail: "https://images.unsplash.com/photo-1596113183800-288bb8f45e27?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&q=80",
        videoEmbed: "https://www.aparat.com/video/video/embed/videohash/q65e4zl/vt/frame",
      },
    ],
  },
  {
    id: "data-science",
    title: "Data Science",
    description: "Learn data analysis, visualization, and machine learning techniques.",
  image: "https://images.unsplash.com/photo-1551288049-b1f3a2b2e6a1?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80",
    icon: "https://img.icons8.com/ios-filled/50/4C6EF5/bar-chart.png",
    lessons: [
      {
        id: "python",
        title: "Python for Data Science",
        content: "Use Python for data analysis and machine learning in this practical course.",
        thumbnail: "https://images.unsplash.com/photo-1516321318423-f06f85e756b6?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&q=80",
        videoEmbed: "https://www.aparat.com/video/video/embed/videohash/q65e4zl/vt/frame",
      },
      {
        id: "visualization",
        title: "Data Visualization",
        content: "Create stunning charts and graphs to visualize data effectively.",
        thumbnail: "https://images.unsplash.com/photo-1551288049-b1f3a2b2e6a1?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&q=80",
        videoEmbed: "https://www.aparat.com/video/video/embed/videohash/q65e4zl/vt/frame",
      },
    ],
  },
];

export-code.js
const fs = require("fs");
const path = require("path");

const OUTPUT_FILE = "project-code.txt";
const targetExtensions = [".js", ".jsx", ".ts", ".tsx", ".json", ".css"];

function readFilesRecursively(dir, output = []) {
  const items = fs.readdirSync(dir);

  items.forEach(item => {
    const fullPath = path.join(dir, item);
    const stats = fs.statSync(fullPath);

    if (stats.isDirectory()) {
      if (item === "node_modules" || item.startsWith(".")) return;
      readFilesRecursively(fullPath, output);
    } else {
      const ext = path.extname(item);
      if (targetExtensions.includes(ext)) {
        const content = fs.readFileSync(fullPath, "utf8");
        const relativePath = path.relative(__dirname, fullPath);
        output.push(`${relativePath}\n${content}\n`);
      }
    }
  });

  return output;
}

const result = readFilesRecursively(__dirname);
fs.writeFileSync(OUTPUT_FILE, result.join("\n"), "utf8");

console.log(`✅ All code exported to ${OUTPUT_FILE}`);

lib\surrealdb.ts
import { Surreal } from 'surrealdb';

const db = new Surreal();
let isConnected = false;

export const connectDB = async () => {
  if (isConnected) return;
  try {
    await db.connect('ws://127.0.0.1:8000', {
      namespace: "test",
      database: "test",
      auth: {
        username: "root",
        password: "root",
      }
    });
    isConnected = true;
    console.log('Connect Shodid');
  } catch (error) {
    console.log('Connect Nashodid', error);
  }
};

export default db;

middleware.ts
import { clerkMiddleware, createRouteMatcher } from "@clerk/nextjs/server";

// مسیرهای خصوصی که نیاز به لاگین دارن
const isPrivateRoute = createRouteMatcher([
  "/courses/(.*)/lessons/(.*)",
]);

export default clerkMiddleware(async (auth, request) => {
  if (isPrivateRoute(request)) {
    await auth.protect();
  }
});

export const config = {
  matcher: [
    // Skip Next.js internals and all static files, unless found in search params
    "/((?!_next|[^?]*\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)",
    // Always run for API routes
    "/(api|trpc)(.*)",
  ],
};

next-env.d.ts
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.


next.config.ts
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;


package-lock.json
{
  "name": "my-learning-platform",
  "version": "0.1.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "my-learning-platform",
      "version": "0.1.0",
      "dependencies": {
        "@clerk/nextjs": "^6.23.1",
        "lucide-react": "^0.525.0",
        "next": "15.3.4",
        "react": "^19.0.0",
        "react-dom": "^19.0.0",
        "surrealdb": "^1.3.2",
        "uuidv7": "^1.0.2"
      },
      "devDependencies": {
        "@types/node": "^20",
        "@types/react": "^19",
        "@types/react-dom": "^19",
        "typescript": "^5"
      }
    },
    "node_modules/@clerk/backend": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/@clerk/backend/-/backend-2.3.0.tgz",
      "integrity": "sha512-QkvJOF6nshJ9TkCjdXKY2MDWv29/TefIop350sXMpIrN1fIJIWzdFEnIjd4PCINSySPSctlRybL51Z8G/aTusg==",
      "license": "MIT",
      "dependencies": {
        "@clerk/shared": "^3.10.0",
        "@clerk/types": "^4.62.0",
        "cookie": "1.0.2",
        "snakecase-keys": "8.0.1",
        "tslib": "2.8.1"
      },
      "engines": {
        "node": ">=18.17.0"
      }
    },
    "node_modules/@clerk/clerk-react": {
      "version": "5.32.2",
      "resolved": "https://registry.npmjs.org/@clerk/clerk-react/-/clerk-react-5.32.2.tgz",
      "integrity": "sha512-Me/mN7FW8QiF1M2yUtDJzQ12O+XEgFNbi82n+VILrPK/ilfufmA2uscqyyUyTmpxybwDHzD/U4Rve7HXwReweg==",
      "license": "MIT",
      "dependencies": {
        "@clerk/shared": "^3.10.0",
        "@clerk/types": "^4.62.0",
        "tslib": "2.8.1"
      },
      "engines": {
        "node": ">=18.17.0"
      },
      "peerDependencies": {
        "react": "^18.0.0 || ^19.0.0 || ^19.0.0-0",
        "react-dom": "^18.0.0 || ^19.0.0 || ^19.0.0-0"
      }
    },
    "node_modules/@clerk/nextjs": {
      "version": "6.23.1",
      "resolved": "https://registry.npmjs.org/@clerk/nextjs/-/nextjs-6.23.1.tgz",
      "integrity": "sha512-/c6FxnFd/m5uKVwbQTW1rJIOYoIHxRTc3MIVBzK7rSzukz23UFVZxeEsOmpQX2RT5hKyt5nlT15aci3bkhsPYw==",
      "license": "MIT",
      "dependencies": {
        "@clerk/backend": "^2.3.0",
        "@clerk/clerk-react": "^5.32.2",
        "@clerk/shared": "^3.10.0",
        "@clerk/types": "^4.62.0",
        "server-only": "0.0.1",
        "tslib": "2.8.1"
      },
      "engines": {
        "node": ">=18.17.0"
      },
      "peerDependencies": {
        "next": "^13.5.7 || ^14.2.25 || ^15.2.3",
        "react": "^18.0.0 || ^19.0.0 || ^19.0.0-0",
        "react-dom": "^18.0.0 || ^19.0.0 || ^19.0.0-0"
      }
    },
    "node_modules/@clerk/shared": {
      "version": "3.10.0",
      "resolved": "https://registry.npmjs.org/@clerk/shared/-/shared-3.10.0.tgz",
      "integrity": "sha512-3Xljj8v5dszuxzSEnQMQTf5pgfs8i/zzq9Dl744q0LutL5qGwtmk5Ja7G0kN3qQymyYy6OJOVcgnweevjazOPQ==",
      "hasInstallScript": true,
      "license": "MIT",
      "dependencies": {
        "@clerk/types": "^4.62.0",
        "dequal": "2.0.3",
        "glob-to-regexp": "0.4.1",
        "js-cookie": "3.0.5",
        "std-env": "^3.9.0",
        "swr": "^2.3.3"
      },
      "engines": {
        "node": ">=18.17.0"
      },
      "peerDependencies": {
        "react": "^18.0.0 || ^19.0.0 || ^19.0.0-0",
        "react-dom": "^18.0.0 || ^19.0.0 || ^19.0.0-0"
      },
      "peerDependenciesMeta": {
        "react": {
          "optional": true
        },
        "react-dom": {
          "optional": true
        }
      }
    },
    "node_modules/@clerk/types": {
      "version": "4.62.0",
      "resolved": "https://registry.npmjs.org/@clerk/types/-/types-4.62.0.tgz",
      "integrity": "sha512-Ps/8eQHCuv2bZYgTG3+4xgxlltoX91GNf+G5TG/DSSmECgR657qGoasOrLLcMMyE+OZiX57k51oH137Ohhggog==",
      "license": "MIT",
      "dependencies": {
        "csstype": "3.1.3"
      },
      "engines": {
        "node": ">=18.17.0"
      }
    },
    "node_modules/@emnapi/runtime": {
      "version": "1.4.3",
      "resolved": "https://registry.npmjs.org/@emnapi/runtime/-/runtime-1.4.3.tgz",
      "integrity": "sha512-pBPWdu6MLKROBX05wSNKcNb++m5Er+KQ9QkB+WVM+pW2Kx9hoSrVTnu3BdkI5eBLZoKu/J6mW/B6i6bJB2ytXQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "tslib": "^2.4.0"
      }
    },
    "node_modules/@img/sharp-darwin-arm64": {
      "version": "0.34.2",
      "resolved": "https://registry.npmjs.org/@img/sharp-darwin-arm64/-/sharp-darwin-arm64-0.34.2.tgz",
      "integrity": "sha512-OfXHZPppddivUJnqyKoi5YVeHRkkNE2zUFT2gbpKxp/JZCFYEYubnMg+gOp6lWfasPrTS+KPosKqdI+ELYVDtg==",
      "cpu": [
        "arm64"
      ],
      "license": "Apache-2.0",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      },
      "optionalDependencies": {
        "@img/sharp-libvips-darwin-arm64": "1.1.0"
      }
    },
    "node_modules/@img/sharp-darwin-x64": {
      "version": "0.34.2",
      "resolved": "https://registry.npmjs.org/@img/sharp-darwin-x64/-/sharp-darwin-x64-0.34.2.tgz",
      "integrity": "sha512-dYvWqmjU9VxqXmjEtjmvHnGqF8GrVjM2Epj9rJ6BUIXvk8slvNDJbhGFvIoXzkDhrJC2jUxNLz/GUjjvSzfw+g==",
      "cpu": [
        "x64"
      ],
      "license": "Apache-2.0",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      },
      "optionalDependencies": {
        "@img/sharp-libvips-darwin-x64": "1.1.0"
      }
    },
    "node_modules/@img/sharp-libvips-darwin-arm64": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-darwin-arm64/-/sharp-libvips-darwin-arm64-1.1.0.tgz",
      "integrity": "sha512-HZ/JUmPwrJSoM4DIQPv/BfNh9yrOA8tlBbqbLz4JZ5uew2+o22Ik+tHQJcih7QJuSa0zo5coHTfD5J8inqj9DA==",
      "cpu": [
        "arm64"
      ],
      "license": "LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "darwin"
      ],
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-libvips-darwin-x64": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-darwin-x64/-/sharp-libvips-darwin-x64-1.1.0.tgz",
      "integrity": "sha512-Xzc2ToEmHN+hfvsl9wja0RlnXEgpKNmftriQp6XzY/RaSfwD9th+MSh0WQKzUreLKKINb3afirxW7A0fz2YWuQ==",
      "cpu": [
        "x64"
      ],
      "license": "LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "darwin"
      ],
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-libvips-linux-arm": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-arm/-/sharp-libvips-linux-arm-1.1.0.tgz",
      "integrity": "sha512-s8BAd0lwUIvYCJyRdFqvsj+BJIpDBSxs6ivrOPm/R7piTs5UIwY5OjXrP2bqXC9/moGsyRa37eYWYCOGVXxVrA==",
      "cpu": [
        "arm"
      ],
      "license": "LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "linux"
      ],
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-libvips-linux-arm64": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-arm64/-/sharp-libvips-linux-arm64-1.1.0.tgz",
      "integrity": "sha512-IVfGJa7gjChDET1dK9SekxFFdflarnUB8PwW8aGwEoF3oAsSDuNUTYS+SKDOyOJxQyDC1aPFMuRYLoDInyV9Ew==",
      "cpu": [
        "arm64"
      ],
      "license": "LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "linux"
      ],
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-libvips-linux-ppc64": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-ppc64/-/sharp-libvips-linux-ppc64-1.1.0.tgz",
      "integrity": "sha512-tiXxFZFbhnkWE2LA8oQj7KYR+bWBkiV2nilRldT7bqoEZ4HiDOcePr9wVDAZPi/Id5fT1oY9iGnDq20cwUz8lQ==",
      "cpu": [
        "ppc64"
      ],
      "license": "LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "linux"
      ],
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-libvips-linux-s390x": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-s390x/-/sharp-libvips-linux-s390x-1.1.0.tgz",
      "integrity": "sha512-xukSwvhguw7COyzvmjydRb3x/09+21HykyapcZchiCUkTThEQEOMtBj9UhkaBRLuBrgLFzQ2wbxdeCCJW/jgJA==",
      "cpu": [
        "s390x"
      ],
      "license": "LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "linux"
      ],
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-libvips-linux-x64": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-x64/-/sharp-libvips-linux-x64-1.1.0.tgz",
      "integrity": "sha512-yRj2+reB8iMg9W5sULM3S74jVS7zqSzHG3Ol/twnAAkAhnGQnpjj6e4ayUz7V+FpKypwgs82xbRdYtchTTUB+Q==",
      "cpu": [
        "x64"
      ],
      "license": "LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "linux"
      ],
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-libvips-linuxmusl-arm64": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linuxmusl-arm64/-/sharp-libvips-linuxmusl-arm64-1.1.0.tgz",
      "integrity": "sha512-jYZdG+whg0MDK+q2COKbYidaqW/WTz0cc1E+tMAusiDygrM4ypmSCjOJPmFTvHHJ8j/6cAGyeDWZOsK06tP33w==",
      "cpu": [
        "arm64"
      ],
      "license": "LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "linux"
      ],
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-libvips-linuxmusl-x64": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linuxmusl-x64/-/sharp-libvips-linuxmusl-x64-1.1.0.tgz",
      "integrity": "sha512-wK7SBdwrAiycjXdkPnGCPLjYb9lD4l6Ze2gSdAGVZrEL05AOUJESWU2lhlC+Ffn5/G+VKuSm6zzbQSzFX/P65A==",
      "cpu": [
        "x64"
      ],
      "license": "LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "linux"
      ],
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-linux-arm": {
      "version": "0.34.2",
      "resolved": "https://registry.npmjs.org/@img/sharp-linux-arm/-/sharp-linux-arm-0.34.2.tgz",
      "integrity": "sha512-0DZzkvuEOqQUP9mo2kjjKNok5AmnOr1jB2XYjkaoNRwpAYMDzRmAqUIa1nRi58S2WswqSfPOWLNOr0FDT3H5RQ==",
      "cpu": [
        "arm"
      ],
      "license": "Apache-2.0",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      },
      "optionalDependencies": {
        "@img/sharp-libvips-linux-arm": "1.1.0"
      }
    },
    "node_modules/@img/sharp-linux-arm64": {
      "version": "0.34.2",
      "resolved": "https://registry.npmjs.org/@img/sharp-linux-arm64/-/sharp-linux-arm64-0.34.2.tgz",
      "integrity": "sha512-D8n8wgWmPDakc83LORcfJepdOSN6MvWNzzz2ux0MnIbOqdieRZwVYY32zxVx+IFUT8er5KPcyU3XXsn+GzG/0Q==",
      "cpu": [
        "arm64"
      ],
      "license": "Apache-2.0",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      },
      "optionalDependencies": {
        "@img/sharp-libvips-linux-arm64": "1.1.0"
      }
    },
    "node_modules/@img/sharp-linux-s390x": {
      "version": "0.34.2",
      "resolved": "https://registry.npmjs.org/@img/sharp-linux-s390x/-/sharp-linux-s390x-0.34.2.tgz",
      "integrity": "sha512-EGZ1xwhBI7dNISwxjChqBGELCWMGDvmxZXKjQRuqMrakhO8QoMgqCrdjnAqJq/CScxfRn+Bb7suXBElKQpPDiw==",
      "cpu": [
        "s390x"
      ],
      "license": "Apache-2.0",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      },
      "optionalDependencies": {
        "@img/sharp-libvips-linux-s390x": "1.1.0"
      }
    },
    "node_modules/@img/sharp-linux-x64": {
      "version": "0.34.2",
      "resolved": "https://registry.npmjs.org/@img/sharp-linux-x64/-/sharp-linux-x64-0.34.2.tgz",
      "integrity": "sha512-sD7J+h5nFLMMmOXYH4DD9UtSNBD05tWSSdWAcEyzqW8Cn5UxXvsHAxmxSesYUsTOBmUnjtxghKDl15EvfqLFbQ==",
      "cpu": [
        "x64"
      ],
      "license": "Apache-2.0",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      },
      "optionalDependencies": {
        "@img/sharp-libvips-linux-x64": "1.1.0"
      }
    },
    "node_modules/@img/sharp-linuxmusl-arm64": {
      "version": "0.34.2",
      "resolved": "https://registry.npmjs.org/@img/sharp-linuxmusl-arm64/-/sharp-linuxmusl-arm64-0.34.2.tgz",
      "integrity": "sha512-NEE2vQ6wcxYav1/A22OOxoSOGiKnNmDzCYFOZ949xFmrWZOVII1Bp3NqVVpvj+3UeHMFyN5eP/V5hzViQ5CZNA==",
      "cpu": [
        "arm64"
      ],
      "license": "Apache-2.0",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      },
      "optionalDependencies": {
        "@img/sharp-libvips-linuxmusl-arm64": "1.1.0"
      }
    },
    "node_modules/@img/sharp-linuxmusl-x64": {
      "version": "0.34.2",
      "resolved": "https://registry.npmjs.org/@img/sharp-linuxmusl-x64/-/sharp-linuxmusl-x64-0.34.2.tgz",
      "integrity": "sha512-DOYMrDm5E6/8bm/yQLCWyuDJwUnlevR8xtF8bs+gjZ7cyUNYXiSf/E8Kp0Ss5xasIaXSHzb888V1BE4i1hFhAA==",
      "cpu": [
        "x64"
      ],
      "license": "Apache-2.0",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      },
      "optionalDependencies": {
        "@img/sharp-libvips-linuxmusl-x64": "1.1.0"
      }
    },
    "node_modules/@img/sharp-wasm32": {
      "version": "0.34.2",
      "resolved": "https://registry.npmjs.org/@img/sharp-wasm32/-/sharp-wasm32-0.34.2.tgz",
      "integrity": "sha512-/VI4mdlJ9zkaq53MbIG6rZY+QRN3MLbR6usYlgITEzi4Rpx5S6LFKsycOQjkOGmqTNmkIdLjEvooFKwww6OpdQ==",
      "cpu": [
        "wasm32"
      ],
      "license": "Apache-2.0 AND LGPL-3.0-or-later AND MIT",
      "optional": true,
      "dependencies": {
        "@emnapi/runtime": "^1.4.3"
      },
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-win32-arm64": {
      "version": "0.34.2",
      "resolved": "https://registry.npmjs.org/@img/sharp-win32-arm64/-/sharp-win32-arm64-0.34.2.tgz",
      "integrity": "sha512-cfP/r9FdS63VA5k0xiqaNaEoGxBg9k7uE+RQGzuK9fHt7jib4zAVVseR9LsE4gJcNWgT6APKMNnCcnyOtmSEUQ==",
      "cpu": [
        "arm64"
      ],
      "license": "Apache-2.0 AND LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-win32-ia32": {
      "version": "0.34.2",
      "resolved": "https://registry.npmjs.org/@img/sharp-win32-ia32/-/sharp-win32-ia32-0.34.2.tgz",
      "integrity": "sha512-QLjGGvAbj0X/FXl8n1WbtQ6iVBpWU7JO94u/P2M4a8CFYsvQi4GW2mRy/JqkRx0qpBzaOdKJKw8uc930EX2AHw==",
      "cpu": [
        "ia32"
      ],
      "license": "Apache-2.0 AND LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-win32-x64": {
      "version": "0.34.2",
      "resolved": "https://registry.npmjs.org/@img/sharp-win32-x64/-/sharp-win32-x64-0.34.2.tgz",
      "integrity": "sha512-aUdT6zEYtDKCaxkofmmJDJYGCf0+pJg3eU9/oBuqvEeoB9dKI6ZLc/1iLJCTuJQDO4ptntAlkUmHgGjyuobZbw==",
      "cpu": [
        "x64"
      ],
      "license": "Apache-2.0 AND LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@next/env": {
      "version": "15.3.4",
      "resolved": "https://registry.npmjs.org/@next/env/-/env-15.3.4.tgz",
      "integrity": "sha512-ZkdYzBseS6UjYzz6ylVKPOK+//zLWvD6Ta+vpoye8cW11AjiQjGYVibF0xuvT4L0iJfAPfZLFidaEzAOywyOAQ==",
      "license": "MIT"
    },
    "node_modules/@next/swc-darwin-arm64": {
      "version": "15.3.4",
      "resolved": "https://registry.npmjs.org/@next/swc-darwin-arm64/-/swc-darwin-arm64-15.3.4.tgz",
      "integrity": "sha512-z0qIYTONmPRbwHWvpyrFXJd5F9YWLCsw3Sjrzj2ZvMYy9NPQMPZ1NjOJh4ojr4oQzcGYwgJKfidzehaNa1BpEg==",
      "cpu": [
        "arm64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-darwin-x64": {
      "version": "15.3.4",
      "resolved": "https://registry.npmjs.org/@next/swc-darwin-x64/-/swc-darwin-x64-15.3.4.tgz",
      "integrity": "sha512-Z0FYJM8lritw5Wq+vpHYuCIzIlEMjewG2aRkc3Hi2rcbULknYL/xqfpBL23jQnCSrDUGAo/AEv0Z+s2bff9Zkw==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-linux-arm64-gnu": {
      "version": "15.3.4",
      "resolved": "https://registry.npmjs.org/@next/swc-linux-arm64-gnu/-/swc-linux-arm64-gnu-15.3.4.tgz",
      "integrity": "sha512-l8ZQOCCg7adwmsnFm8m5q9eIPAHdaB2F3cxhufYtVo84pymwKuWfpYTKcUiFcutJdp9xGHC+F1Uq3xnFU1B/7g==",
      "cpu": [
        "arm64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-linux-arm64-musl": {
      "version": "15.3.4",
      "resolved": "https://registry.npmjs.org/@next/swc-linux-arm64-musl/-/swc-linux-arm64-musl-15.3.4.tgz",
      "integrity": "sha512-wFyZ7X470YJQtpKot4xCY3gpdn8lE9nTlldG07/kJYexCUpX1piX+MBfZdvulo+t1yADFVEuzFfVHfklfEx8kw==",
      "cpu": [
        "arm64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-linux-x64-gnu": {
      "version": "15.3.4",
      "resolved": "https://registry.npmjs.org/@next/swc-linux-x64-gnu/-/swc-linux-x64-gnu-15.3.4.tgz",
      "integrity": "sha512-gEbH9rv9o7I12qPyvZNVTyP/PWKqOp8clvnoYZQiX800KkqsaJZuOXkWgMa7ANCCh/oEN2ZQheh3yH8/kWPSEg==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-linux-x64-musl": {
      "version": "15.3.4",
      "resolved": "https://registry.npmjs.org/@next/swc-linux-x64-musl/-/swc-linux-x64-musl-15.3.4.tgz",
      "integrity": "sha512-Cf8sr0ufuC/nu/yQ76AnarbSAXcwG/wj+1xFPNbyNo8ltA6kw5d5YqO8kQuwVIxk13SBdtgXrNyom3ZosHAy4A==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-win32-arm64-msvc": {
      "version": "15.3.4",
      "resolved": "https://registry.npmjs.org/@next/swc-win32-arm64-msvc/-/swc-win32-arm64-msvc-15.3.4.tgz",
      "integrity": "sha512-ay5+qADDN3rwRbRpEhTOreOn1OyJIXS60tg9WMYTWCy3fB6rGoyjLVxc4dR9PYjEdR2iDYsaF5h03NA+XuYPQQ==",
      "cpu": [
        "arm64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-win32-x64-msvc": {
      "version": "15.3.4",
      "resolved": "https://registry.npmjs.org/@next/swc-win32-x64-msvc/-/swc-win32-x64-msvc-15.3.4.tgz",
      "integrity": "sha512-4kDt31Bc9DGyYs41FTL1/kNpDeHyha2TC0j5sRRoKCyrhNcfZ/nRQkAUlF27mETwm8QyHqIjHJitfcza2Iykfg==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@swc/counter": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/@swc/counter/-/counter-0.1.3.tgz",
      "integrity": "sha512-e2BR4lsJkkRlKZ/qCHPw9ZaSxc0MVUd7gtbtaB7aMvHeJVYe8sOB8DBZkP2DtISHGSku9sCK6T6cnY0CtXrOCQ==",
      "license": "Apache-2.0"
    },
    "node_modules/@swc/helpers": {
      "version": "0.5.15",
      "resolved": "https://registry.npmjs.org/@swc/helpers/-/helpers-0.5.15.tgz",
      "integrity": "sha512-JQ5TuMi45Owi4/BIMAJBoSQoOJu12oOk/gADqlcUL9JEdHB8vyjUSsxqeNXnmXHjYKMi2WcYtezGEEhqUI/E2g==",
      "license": "Apache-2.0",
      "dependencies": {
        "tslib": "^2.8.0"
      }
    },
    "node_modules/@types/node": {
      "version": "20.19.2",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-20.19.2.tgz",
      "integrity": "sha512-9pLGGwdzOUBDYi0GNjM97FIA+f92fqSke6joWeBjWXllfNxZBs7qeMF7tvtOIsbY45xkWkxrdwUfUf3MnQa9gA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "undici-types": "~6.21.0"
      }
    },
    "node_modules/@types/react": {
      "version": "19.1.8",
      "resolved": "https://registry.npmjs.org/@types/react/-/react-19.1.8.tgz",
      "integrity": "sha512-AwAfQ2Wa5bCx9WP8nZL2uMZWod7J7/JSplxbTmBQ5ms6QpqNYm672H0Vu9ZVKVngQ+ii4R/byguVEUZQyeg44g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "csstype": "^3.0.2"
      }
    },
    "node_modules/@types/react-dom": {
      "version": "19.1.6",
      "resolved": "https://registry.npmjs.org/@types/react-dom/-/react-dom-19.1.6.tgz",
      "integrity": "sha512-4hOiT/dwO8Ko0gV1m/TJZYk3y0KBnY9vzDh7W+DH17b2HFSOGgdj33dhihPeuy3l0q23+4e+hoXHV6hCC4dCXw==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "@types/react": "^19.0.0"
      }
    },
    "node_modules/busboy": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/busboy/-/busboy-1.6.0.tgz",
      "integrity": "sha512-8SFQbg/0hQ9xy3UNTB0YEnsNBbWfhf7RtnzpL7TkBiTBRfrQ9Fxcnz7VJsleJpyp6rVLvXiuORqjlHi5q+PYuA==",
      "dependencies": {
        "streamsearch": "^1.1.0"
      },
      "engines": {
        "node": ">=10.16.0"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001726",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001726.tgz",
      "integrity": "sha512-VQAUIUzBiZ/UnlM28fSp2CRF3ivUn1BWEvxMcVTNwpw91Py1pGbPIyIKtd+tzct9C3ouceCVdGAXxZOpZAsgdw==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "CC-BY-4.0"
    },
    "node_modules/client-only": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/client-only/-/client-only-0.0.1.tgz",
      "integrity": "sha512-IV3Ou0jSMzZrd3pZ48nLkT9DA7Ag1pnPzaiQhpW7c3RbcqqzvzzVu+L8gfqMp/8IM2MQtSiqaCxrrcfu8I8rMA==",
      "license": "MIT"
    },
    "node_modules/color": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/color/-/color-4.2.3.tgz",
      "integrity": "sha512-1rXeuUUiGGrykh+CeBdu5Ie7OJwinCgQY0bc7GCRxy5xVHy+moaqkpL/jqQq0MtQOeYcrqEz4abc5f0KtU7W4A==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "color-convert": "^2.0.1",
        "color-string": "^1.9.0"
      },
      "engines": {
        "node": ">=12.5.0"
      }
    },
    "node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/color-string": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/color-string/-/color-string-1.9.1.tgz",
      "integrity": "sha512-shrVawQFojnZv6xM40anx4CkoDP+fZsw/ZerEMsW/pyzsRbElpsL/DBVW7q3ExxwusdNXI3lXpuhEZkzs8p5Eg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "color-name": "^1.0.0",
        "simple-swizzle": "^0.2.2"
      }
    },
    "node_modules/cookie": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-1.0.2.tgz",
      "integrity": "sha512-9Kr/j4O16ISv8zBBhJoi4bXOYNTkFLOqSL3UDB0njXxCXNezjeyVrJyGOWtgfs/q2km1gwBcfH8q1yEGoMYunA==",
      "license": "MIT",
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/csstype": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
      "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==",
      "license": "MIT"
    },
    "node_modules/dequal": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/dequal/-/dequal-2.0.3.tgz",
      "integrity": "sha512-0je+qPKHEMohvfRTCEo3CrPG6cAzAYgmzKyxRiYSSDkS6eGJdyVJm7WaYA5ECaAD9wLB2T4EEeymA5aFVcYXCA==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/detect-libc": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-2.0.4.tgz",
      "integrity": "sha512-3UDv+G9CsCKO1WKMGw9fwq/SWJYbI0c5Y7LU1AXYoDdbhE2AHQ6N6Nb34sG8Fj7T5APy8qXDCKuuIHd1BR0tVA==",
      "license": "Apache-2.0",
      "optional": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/dot-case": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/dot-case/-/dot-case-3.0.4.tgz",
      "integrity": "sha512-Kv5nKlh6yRrdrGvxeJ2e5y2eRUpkUosIW4A2AS38zwSz27zu7ufDwQPi5Jhs3XAlGNetl3bmnGhQsMtkKJnj3w==",
      "license": "MIT",
      "dependencies": {
        "no-case": "^3.0.4",
        "tslib": "^2.0.3"
      }
    },
    "node_modules/glob-to-regexp": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/glob-to-regexp/-/glob-to-regexp-0.4.1.tgz",
      "integrity": "sha512-lkX1HJXwyMcprw/5YUZc2s7DrpAiHB21/V+E1rHUrVNokkvB6bqMzT0VfV6/86ZNabt1k14YOIaT7nDvOX3Iiw==",
      "license": "BSD-2-Clause"
    },
    "node_modules/is-arrayish": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.3.2.tgz",
      "integrity": "sha512-eVRqCvVlZbuw3GrM63ovNSNAeA1K16kaR/LRY/92w0zxQ5/1YzwblUX652i4Xs9RwAGjW9d9y6X88t8OaAJfWQ==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/isows": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/isows/-/isows-1.0.7.tgz",
      "integrity": "sha512-I1fSfDCZL5P0v33sVqeTDSpcstAg/N+wF5HS033mogOVIp4B+oHC7oOCsA3axAbBSGTJ8QubbNmnIRN/h8U7hg==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/wevm"
        }
      ],
      "license": "MIT",
      "peerDependencies": {
        "ws": "*"
      }
    },
    "node_modules/js-cookie": {
      "version": "3.0.5",
      "resolved": "https://registry.npmjs.org/js-cookie/-/js-cookie-3.0.5.tgz",
      "integrity": "sha512-cEiJEAEoIbWfCZYKWhVwFuvPX1gETRYPw6LlaTKoxD3s2AkXzkCjnp6h0V77ozyqj0jakteJ4YqDJT830+lVGw==",
      "license": "MIT",
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/lower-case": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/lower-case/-/lower-case-2.0.2.tgz",
      "integrity": "sha512-7fm3l3NAF9WfN6W3JOmf5drwpVqX78JtoGJ3A6W0a6ZnldM41w2fV5D490psKFTpMds8TJse/eHLFFsNHHjHgg==",
      "license": "MIT",
      "dependencies": {
        "tslib": "^2.0.3"
      }
    },
    "node_modules/lucide-react": {
      "version": "0.525.0",
      "resolved": "https://registry.npmjs.org/lucide-react/-/lucide-react-0.525.0.tgz",
      "integrity": "sha512-Tm1txJ2OkymCGkvwoHt33Y2JpN5xucVq1slHcgE6Lk0WjDfjgKWor5CdVER8U6DvcfMwh4M8XxmpTiyzfmfDYQ==",
      "license": "ISC",
      "peerDependencies": {
        "react": "^16.5.1 || ^17.0.0 || ^18.0.0 || ^19.0.0"
      }
    },
    "node_modules/map-obj": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/map-obj/-/map-obj-4.3.0.tgz",
      "integrity": "sha512-hdN1wVrZbb29eBGiGjJbeP8JbKjq1urkHJ/LIP/NY48MZ1QVXUsQBV1G1zvYFHn1XE06cwjBsOI2K3Ulnj1YXQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/nanoid": {
      "version": "3.3.11",
      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz",
      "integrity": "sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "bin": {
        "nanoid": "bin/nanoid.cjs"
      },
      "engines": {
        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
      }
    },
    "node_modules/next": {
      "version": "15.3.4",
      "resolved": "https://registry.npmjs.org/next/-/next-15.3.4.tgz",
      "integrity": "sha512-mHKd50C+mCjam/gcnwqL1T1vPx/XQNFlXqFIVdgQdVAFY9iIQtY0IfaVflEYzKiqjeA7B0cYYMaCrmAYFjs4rA==",
      "license": "MIT",
      "dependencies": {
        "@next/env": "15.3.4",
        "@swc/counter": "0.1.3",
        "@swc/helpers": "0.5.15",
        "busboy": "1.6.0",
        "caniuse-lite": "^1.0.30001579",
        "postcss": "8.4.31",
        "styled-jsx": "5.1.6"
      },
      "bin": {
        "next": "dist/bin/next"
      },
      "engines": {
        "node": "^18.18.0 || ^19.8.0 || >= 20.0.0"
      },
      "optionalDependencies": {
        "@next/swc-darwin-arm64": "15.3.4",
        "@next/swc-darwin-x64": "15.3.4",
        "@next/swc-linux-arm64-gnu": "15.3.4",
        "@next/swc-linux-arm64-musl": "15.3.4",
        "@next/swc-linux-x64-gnu": "15.3.4",
        "@next/swc-linux-x64-musl": "15.3.4",
        "@next/swc-win32-arm64-msvc": "15.3.4",
        "@next/swc-win32-x64-msvc": "15.3.4",
        "sharp": "^0.34.1"
      },
      "peerDependencies": {
        "@opentelemetry/api": "^1.1.0",
        "@playwright/test": "^1.41.2",
        "babel-plugin-react-compiler": "*",
        "react": "^18.2.0 || 19.0.0-rc-de68d2f4-20241204 || ^19.0.0",
        "react-dom": "^18.2.0 || 19.0.0-rc-de68d2f4-20241204 || ^19.0.0",
        "sass": "^1.3.0"
      },
      "peerDependenciesMeta": {
        "@opentelemetry/api": {
          "optional": true
        },
        "@playwright/test": {
          "optional": true
        },
        "babel-plugin-react-compiler": {
          "optional": true
        },
        "sass": {
          "optional": true
        }
      }
    },
    "node_modules/no-case": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/no-case/-/no-case-3.0.4.tgz",
      "integrity": "sha512-fgAN3jGAh+RoxUGZHTSOLJIqUc2wmoBwGR4tbpNAKmmovFoWq0OdRkb0VkldReO2a2iBT/OEulG9XSUc10r3zg==",
      "license": "MIT",
      "dependencies": {
        "lower-case": "^2.0.2",
        "tslib": "^2.0.3"
      }
    },
    "node_modules/picocolors": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
      "license": "ISC"
    },
    "node_modules/postcss": {
      "version": "8.4.31",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.4.31.tgz",
      "integrity": "sha512-PS08Iboia9mts/2ygV3eLpY5ghnUcfLV/EXTOW1E2qYxJKGGBUtNjN76FYHnMs36RmARn41bC0AZmn+rR0OVpQ==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "nanoid": "^3.3.6",
        "picocolors": "^1.0.0",
        "source-map-js": "^1.0.2"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/react": {
      "version": "19.1.0",
      "resolved": "https://registry.npmjs.org/react/-/react-19.1.0.tgz",
      "integrity": "sha512-FS+XFBNvn3GTAWq26joslQgWNoFu08F4kl0J4CgdNKADkdSGXQyTCnKteIAJy96Br6YbpEU1LSzV5dYtjMkMDg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-dom": {
      "version": "19.1.0",
      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-19.1.0.tgz",
      "integrity": "sha512-Xs1hdnE+DyKgeHJeJznQmYMIBG3TKIHJJT95Q58nHLSrElKlGQqDTR2HQ9fx5CN/Gk6Vh/kupBTDLU11/nDk/g==",
      "license": "MIT",
      "dependencies": {
        "scheduler": "^0.26.0"
      },
      "peerDependencies": {
        "react": "^19.1.0"
      }
    },
    "node_modules/scheduler": {
      "version": "0.26.0",
      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.26.0.tgz",
      "integrity": "sha512-NlHwttCI/l5gCPR3D1nNXtWABUmBwvZpEQiD4IXSbIDq8BzLIK/7Ir5gTFSGZDUu37K5cMNp0hFtzO38sC7gWA==",
      "license": "MIT"
    },
    "node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "license": "ISC",
      "optional": true,
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/server-only": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/server-only/-/server-only-0.0.1.tgz",
      "integrity": "sha512-qepMx2JxAa5jjfzxG79yPPq+8BuFToHd1hm7kI+Z4zAq1ftQiP7HcxMhDDItrbtwVeLg/cY2JnKnrcFkmiswNA==",
      "license": "MIT"
    },
    "node_modules/sharp": {
      "version": "0.34.2",
      "resolved": "https://registry.npmjs.org/sharp/-/sharp-0.34.2.tgz",
      "integrity": "sha512-lszvBmB9QURERtyKT2bNmsgxXK0ShJrL/fvqlonCo7e6xBF8nT8xU6pW+PMIbLsz0RxQk3rgH9kd8UmvOzlMJg==",
      "hasInstallScript": true,
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "color": "^4.2.3",
        "detect-libc": "^2.0.4",
        "semver": "^7.7.2"
      },
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      },
      "optionalDependencies": {
        "@img/sharp-darwin-arm64": "0.34.2",
        "@img/sharp-darwin-x64": "0.34.2",
        "@img/sharp-libvips-darwin-arm64": "1.1.0",
        "@img/sharp-libvips-darwin-x64": "1.1.0",
        "@img/sharp-libvips-linux-arm": "1.1.0",
        "@img/sharp-libvips-linux-arm64": "1.1.0",
        "@img/sharp-libvips-linux-ppc64": "1.1.0",
        "@img/sharp-libvips-linux-s390x": "1.1.0",
        "@img/sharp-libvips-linux-x64": "1.1.0",
        "@img/sharp-libvips-linuxmusl-arm64": "1.1.0",
        "@img/sharp-libvips-linuxmusl-x64": "1.1.0",
        "@img/sharp-linux-arm": "0.34.2",
        "@img/sharp-linux-arm64": "0.34.2",
        "@img/sharp-linux-s390x": "0.34.2",
        "@img/sharp-linux-x64": "0.34.2",
        "@img/sharp-linuxmusl-arm64": "0.34.2",
        "@img/sharp-linuxmusl-x64": "0.34.2",
        "@img/sharp-wasm32": "0.34.2",
        "@img/sharp-win32-arm64": "0.34.2",
        "@img/sharp-win32-ia32": "0.34.2",
        "@img/sharp-win32-x64": "0.34.2"
      }
    },
    "node_modules/simple-swizzle": {
      "version": "0.2.2",
      "resolved": "https://registry.npmjs.org/simple-swizzle/-/simple-swizzle-0.2.2.tgz",
      "integrity": "sha512-JA//kQgZtbuY83m+xT+tXJkmJncGMTFT+C+g2h2R9uxkYIrE2yy9sgmcLhCnw57/WSD+Eh3J97FPEDFnbXnDUg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "is-arrayish": "^0.3.1"
      }
    },
    "node_modules/snake-case": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/snake-case/-/snake-case-3.0.4.tgz",
      "integrity": "sha512-LAOh4z89bGQvl9pFfNF8V146i7o7/CqFPbqzYgP+yYzDIDeS9HaNFtXABamRW+AQzEVODcvE79ljJ+8a9YSdMg==",
      "license": "MIT",
      "dependencies": {
        "dot-case": "^3.0.4",
        "tslib": "^2.0.3"
      }
    },
    "node_modules/snakecase-keys": {
      "version": "8.0.1",
      "resolved": "https://registry.npmjs.org/snakecase-keys/-/snakecase-keys-8.0.1.tgz",
      "integrity": "sha512-Sj51kE1zC7zh6TDlNNz0/Jn1n5HiHdoQErxO8jLtnyrkJW/M5PrI7x05uDgY3BO7OUQYKCvmeMurW6BPUdwEOw==",
      "license": "MIT",
      "dependencies": {
        "map-obj": "^4.1.0",
        "snake-case": "^3.0.4",
        "type-fest": "^4.15.0"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/source-map-js": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
      "integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/std-env": {
      "version": "3.9.0",
      "resolved": "https://registry.npmjs.org/std-env/-/std-env-3.9.0.tgz",
      "integrity": "sha512-UGvjygr6F6tpH7o2qyqR6QYpwraIjKSdtzyBdyytFOHmPZY917kwdwLG0RbOjWOnKmnm3PeHjaoLLMie7kPLQw==",
      "license": "MIT"
    },
    "node_modules/streamsearch": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/streamsearch/-/streamsearch-1.1.0.tgz",
      "integrity": "sha512-Mcc5wHehp9aXz1ax6bZUyY5afg9u2rv5cqQI3mRrYkGC8rW2hM02jWuwjtL++LS5qinSyhj2QfLyNsuc+VsExg==",
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/styled-jsx": {
      "version": "5.1.6",
      "resolved": "https://registry.npmjs.org/styled-jsx/-/styled-jsx-5.1.6.tgz",
      "integrity": "sha512-qSVyDTeMotdvQYoHWLNGwRFJHC+i+ZvdBRYosOFgC+Wg1vx4frN2/RG/NA7SYqqvKNLf39P2LSRA2pu6n0XYZA==",
      "license": "MIT",
      "dependencies": {
        "client-only": "0.0.1"
      },
      "engines": {
        "node": ">= 12.0.0"
      },
      "peerDependencies": {
        "react": ">= 16.8.0 || 17.x.x || ^18.0.0-0 || ^19.0.0-0"
      },
      "peerDependenciesMeta": {
        "@babel/core": {
          "optional": true
        },
        "babel-plugin-macros": {
          "optional": true
        }
      }
    },
    "node_modules/surrealdb": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/surrealdb/-/surrealdb-1.3.2.tgz",
      "integrity": "sha512-mL7nij33iuon3IQP72F46fgX3p2LAxFCWCBDbZB7IohZ13RTEwJVNq7nZeP1eMSceQUpKzS6OHIWOuF9LYAkNw==",
      "license": "Apache-2.0",
      "dependencies": {
        "isows": "^1.0.6",
        "uuidv7": "^1.0.1"
      },
      "engines": {
        "node": ">=18.0.0"
      },
      "peerDependencies": {
        "tslib": "^2.6.3",
        "typescript": "^5.0.0"
      }
    },
    "node_modules/swr": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/swr/-/swr-2.3.3.tgz",
      "integrity": "sha512-dshNvs3ExOqtZ6kJBaAsabhPdHyeY4P2cKwRCniDVifBMoG/SVI7tfLWqPXriVspf2Rg4tPzXJTnwaihIeFw2A==",
      "license": "MIT",
      "dependencies": {
        "dequal": "^2.0.3",
        "use-sync-external-store": "^1.4.0"
      },
      "peerDependencies": {
        "react": "^16.11.0 || ^17.0.0 || ^18.0.0 || ^19.0.0"
      }
    },
    "node_modules/tslib": {
      "version": "2.8.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
      "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
      "license": "0BSD"
    },
    "node_modules/type-fest": {
      "version": "4.41.0",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-4.41.0.tgz",
      "integrity": "sha512-TeTSQ6H5YHvpqVwBRcnLDCBnDOHWYu7IvGbHT6N8AOymcr9PJGjc1GTtiWZTYg0NCgYwvnYWEkVChQAr9bjfwA==",
      "license": "(MIT OR CC0-1.0)",
      "engines": {
        "node": ">=16"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/typescript": {
      "version": "5.8.3",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.8.3.tgz",
      "integrity": "sha512-p1diW6TqL9L07nNxvRMM7hMMw4c5XOo/1ibL4aAIGmSAt9slTE1Xgw5KWuof2uTOvCg9BY7ZRi+GaF+7sfgPeQ==",
      "license": "Apache-2.0",
      "bin": {
        "tsc": "bin/tsc",
        "tsserver": "bin/tsserver"
      },
      "engines": {
        "node": ">=14.17"
      }
    },
    "node_modules/undici-types": {
      "version": "6.21.0",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-6.21.0.tgz",
      "integrity": "sha512-iwDZqg0QAGrg9Rav5H4n0M64c3mkR59cJ6wQp+7C4nI0gsmExaedaYLNO44eT4AtBBwjbTiGPMlt2Md0T9H9JQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/use-sync-external-store": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/use-sync-external-store/-/use-sync-external-store-1.5.0.tgz",
      "integrity": "sha512-Rb46I4cGGVBmjamjphe8L/UnvJD+uPPtTkNvX5mZgqdbavhI4EbgIWJiIHXJ8bc/i9EQGPRh4DwEURJ552Do0A==",
      "license": "MIT",
      "peerDependencies": {
        "react": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0"
      }
    },
    "node_modules/uuidv7": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/uuidv7/-/uuidv7-1.0.2.tgz",
      "integrity": "sha512-8JQkH4ooXnm1JCIhqTMbtmdnYEn6oKukBxHn1Ic9878jMkL7daTI7anTExfY18VRCX7tcdn5quzvCb6EWrR8PA==",
      "license": "Apache-2.0",
      "bin": {
        "uuidv7": "cli.js"
      }
    },
    "node_modules/ws": {
      "version": "8.18.3",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.18.3.tgz",
      "integrity": "sha512-PEIGCY5tSlUt50cqyMXfCzX+oOPqN0vuGqWzbcJ2xvnkzkq46oOpz7dQaTDBdfICb4N14+GARUDw2XV2N4tvzg==",
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": ">=5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    }
  }
}


package.json
{
  "name": "my-learning-platform",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@clerk/nextjs": "^6.23.1",
    "lucide-react": "^0.525.0",
    "next": "15.3.4",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "surrealdb": "^1.3.2",
    "uuidv7": "^1.0.2"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "typescript": "^5"
  }
}


styles\authButtons.module.css
.authButtons {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.clerkButton {
  padding: 0.5rem 1rem;
  background: linear-gradient(90deg, #4C6EF5, #F472B6);
  color: #ffffff;
  border: none;
  border-radius: 8px;
  font-weight: 500;
  cursor: pointer;
  transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.clerkButton:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
}

@media (max-width: 768px) {
  .authButtons {
    flex-direction: column;
    gap: 0.5rem;
  }

  .clerkButton {
    width: 100%;
    text-align: center;
  }
}

tsconfig.json
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}


types\index.ts
import { RecordId } from 'surrealdb';

export interface Course {
  id: RecordId | string;
  title: string;
  description: string;
  icon: string;
  image: string;
  created_at?: string;
}

export interface Lesson {
  id: RecordId | string;
  course: RecordId | string;
  title: string;
  content: string;
  thumbnail: string;
  videoEmbed: string;
  created_at?: string;
}
